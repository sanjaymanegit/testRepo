# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_35_calbration.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from fci_37_CAL_LOG_pop import fci_37_Ui_MainWindow
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
import sqlite3
import serial
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator


class fci_35_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1367, 768)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        MainWindow.setStyleSheet("background-color: rgb(0, 170, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(30, 30, 1321, 711))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(1060, 20, 241, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setGeometry(QtCore.QRect(480, 550, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_8.setObjectName("pushButton_8")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(340, 10, 631, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setGeometry(QtCore.QRect(440, 80, 401, 161))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox.setObjectName("groupBox")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(190, 70, 47, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(30, 50, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color: rgb(239, 255, 241);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_12.setGeometry(QtCore.QRect(280, 50, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_12.setObjectName("pushButton_12")
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_2.setGeometry(QtCore.QRect(40, 80, 351, 161))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(20, 50, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setStyleSheet("background-color: rgb(239, 255, 241);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_10.setGeometry(QtCore.QRect(220, 50, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_3.setGeometry(QtCore.QRect(890, 80, 401, 161))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_3.setObjectName("groupBox_3")
        self.comboBox_3 = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_3.setGeometry(QtCore.QRect(30, 50, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_3.setFont(font)
        self.comboBox_3.setStyleSheet("background-color: rgb(239, 255, 241);")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.pushButton_11 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_11.setGeometry(QtCore.QRect(260, 50, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_11.setObjectName("pushButton_11")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(180, 60, 51, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.groupBox_6 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_6.setGeometry(QtCore.QRect(40, 270, 421, 331))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_6.setObjectName("groupBox_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber.setGeometry(QtCore.QRect(20, 60, 291, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lcdNumber.setLineWidth(4)
        self.lcdNumber.setDigitCount(7)       
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat) 
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 255, 255);")
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_4 = QtWidgets.QLabel(self.groupBox_6)
        self.label_4.setGeometry(QtCore.QRect(330, 240, 47, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.groupBox_6)
        self.label_6.setGeometry(QtCore.QRect(330, 100, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber_2.setGeometry(QtCore.QRect(20, 190, 291, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber_2.setFont(font)
        self.lcdNumber_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lcdNumber_2.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lcdNumber_2.setLineWidth(4)
        self.lcdNumber_2.setDigitCount(7)       
        self.lcdNumber_2.setSegmentStyle(QtWidgets.QLCDNumber.Flat)        
        self.lcdNumber_2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);\n"
"border-color: rgb(255, 0, 0);")
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.groupBox_4 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_4.setGeometry(QtCore.QRect(780, 270, 511, 421))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_4.setObjectName("groupBox_4")
        self.pushButton_14 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_14.setGeometry(QtCore.QRect(120, 50, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_16 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_16.setGeometry(QtCore.QRect(280, 210, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_16.setObjectName("pushButton_16")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit.setGeometry(QtCore.QRect(280, 130, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(239, 255, 241);")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_17 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_17.setGeometry(QtCore.QRect(60, 210, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_17.setObjectName("pushButton_17")
        self.frame_2 = QtWidgets.QFrame(self.groupBox_4)
        self.frame_2.setGeometry(QtCore.QRect(60, 280, 401, 121))
        self.frame_2.setStyleSheet("color: rgb(255, 255, 0);\n"
"background-color: rgb(0, 85, 0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setLineWidth(3)
        self.frame_2.setObjectName("frame_2")
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setGeometry(QtCore.QRect(40, 10, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        self.label_8.setGeometry(QtCore.QRect(180, 10, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("")
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(40, 60, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(180, 60, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("")
        self.label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.frame_3 = QtWidgets.QFrame(self.groupBox_4)
        self.frame_3.setGeometry(QtCore.QRect(60, 130, 171, 61))
        self.frame_3.setStyleSheet("color: rgb(255, 255, 0);\n"
"background-color: rgb(0, 85, 0);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setLineWidth(3)
        self.frame_3.setObjectName("frame_3")
        self.label_41 = QtWidgets.QLabel(self.frame_3)
        self.label_41.setGeometry(QtCore.QRect(20, 10, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("")
        self.label_41.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_41.setObjectName("label_41")
        self.groupBox_5 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_5.setGeometry(QtCore.QRect(530, 270, 181, 221))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_5.setObjectName("groupBox_5")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox_5)
        self.radioButton.setGeometry(QtCore.QRect(50, 60, 82, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox_5)
        self.radioButton_2.setGeometry(QtCore.QRect(50, 150, 82, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(630, 550, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.groupBox_7 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_7.setGeometry(QtCore.QRect(40, 630, 711, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setStyleSheet("background-color: rgb(0, 85, 0);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_7.setObjectName("groupBox_7")
        self.label_44 = QtWidgets.QLabel(self.groupBox_7)
        self.label_44.setGeometry(QtCore.QRect(20, 20, 641, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_44.setFont(font)
        self.label_44.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_44.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1367, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.ld_flag="No"
        self.capacity_flag="No"
        self.off_position_flag="No"
        self.flag="No"
        self.ser =""
        self.line =""                   
       
        self.xstr0=""
        self.xstr1=""
        self.xstr2=""
        self.buff=[]
        
        self.IO_error_flg=0
        self.xstr3=""
        self.xstr2=""
        self.xstr4=""
        self.current_value=0
        
        self.line1 =""
        self.xstr10=""
        self.xstr11=""
        self.xstr12=""
        self.buff1=[]
        
        self.c_wt=0
        self.count_value=0
        self.count_before=0
        self.count_after=0
        self.k_factor=0
        
        self.green_counter=0
        
        self.last_value=0
        self.current_value=0
        self.enable_buttons_flag="No"
        self.enable_counter=0
        self.weighing_crosses_min_wt_lim="No"
        self.weighing_crosses_max_wt_lim="No"
        self.wt_min_limit=0
        self.wt_max_limit=0      
       
        
        self.last_display_val=""
        self.ld_set=0
        self.mod_val=0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_20.setText(_translate("MainWindow", "05 Aug 2020 12:45:00 "))
        self.pushButton_8.setText(_translate("MainWindow", "LOG"))
        self.label.setText(_translate("MainWindow", "PARAMETER CONFIGURATION AND CALIBRATION"))
        self.groupBox.setTitle(_translate("MainWindow", " CAPACITY SET"))
        self.label_5.setText(_translate("MainWindow", ".Ton"))
        self.comboBox.setItemText(0, _translate("MainWindow", "10"))
        self.comboBox.setItemText(1, _translate("MainWindow", "20"))
        self.comboBox.setItemText(2, _translate("MainWindow", "30"))
        self.comboBox.setItemText(3, _translate("MainWindow", "40"))
        self.comboBox.setItemText(4, _translate("MainWindow", "50"))
        self.comboBox.setItemText(5, _translate("MainWindow", "60"))
        self.comboBox.setItemText(6, _translate("MainWindow", "70"))
        self.comboBox.setItemText(7, _translate("MainWindow", "80"))
        self.comboBox.setItemText(8, _translate("MainWindow", "90"))
        self.comboBox.setItemText(9, _translate("MainWindow", "100"))
        self.pushButton_12.setText(_translate("MainWindow", "SET 2"))
        self.groupBox_2.setTitle(_translate("MainWindow", "LD SET"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "2"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "5"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "10"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "15"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "20"))
        self.comboBox_2.setItemText(6, _translate("MainWindow", "50"))
        self.pushButton_10.setText(_translate("MainWindow", "SET 1"))
        self.groupBox_3.setTitle(_translate("MainWindow", "  OFF POSITION"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "0"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "1"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "2"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "5"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "10"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "15"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "20"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "50"))
        self.pushButton_11.setText(_translate("MainWindow", "SET 3"))
        self.label_7.setText(_translate("MainWindow", "Kg."))
        self.groupBox_6.setTitle(_translate("MainWindow", " LOAD CELL SIGNAL"))
        self.label_4.setText(_translate("MainWindow", "Kg."))
        self.label_6.setText(_translate("MainWindow", "Count"))
        self.groupBox_4.setTitle(_translate("MainWindow", " CALLIBRATION"))
        self.pushButton_14.setText(_translate("MainWindow", "START CALLIBRATION"))
        self.pushButton_16.setText(_translate("MainWindow", "VERIFY"))        
        self.pushButton_16.hide()
        self.pushButton_17.setText(_translate("MainWindow", "CALLIBRATE"))
        self.pushButton_17.hide()
        self.label_3.setText(_translate("MainWindow", "K-Factor    :"))
        self.label_8.setText(_translate("MainWindow", "122.007686787"))
        self.label_9.setText(_translate("MainWindow", "C- Date      :"))
        self.label_10.setText(_translate("MainWindow", "2020-10-19 14:55"))
        self.label_41.setText(_translate("MainWindow", "KEEP  LOAD"))
        self.frame_3.hide()
        self.groupBox_5.setTitle(_translate("MainWindow", "   FLAG"))
        self.radioButton.setText(_translate("MainWindow", "Yes"))
        self.radioButton_2.setText(_translate("MainWindow", "No"))
        self.pushButton_9.setText(_translate("MainWindow", "RETURN"))
        self.groupBox_7.setTitle(_translate("MainWindow", " MESSAGE"))
        self.label_44.setText(_translate("MainWindow", "Successfully set Capacity."))
        self.label_44.hide()
        self.pushButton_9.clicked.connect(MainWindow.close)
        self.timer2=QtCore.QTimer()
        self.timer3=QtCore.QTimer()
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1) 
        self.pushButton_10.clicked.connect(self.ld_set_fun)
        self.pushButton_12.clicked.connect(self.capacity_set)
        self.pushButton_11.clicked.connect(self.off_position_set)
        self.pushButton_14.clicked.connect(self.pre_calibration_steps)
        self.pushButton_17.clicked.connect(self.start_calibration)
        self.pushButton_16.clicked.connect(self.verify_job)
        self.pushButton_8.clicked.connect(self.open_new_window)
        self.radioButton.clicked.connect(self.flag_set)
        self.radioButton_2.clicked.connect(self.flag_set)
        
        self.lineEdit.hide()
        self.load_data()
        
    def device_date(self):     
        self.label_20.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M:%S"))
    
    
    
    def load_data(self):       
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT LD_SET,(CAPACITY_SET*1000),OFF_POSITION_SET,FLAG_SET,K_FACTOR,LAST_CALIBRATION_DT FROM GLOBAL_VAR  ") 
        for x in results:
               self.ld_set=int(x[0])
               self.wt_min_limit=int(x[2])
               self.wt_max_limit=int(x[1])               
               self.comboBox_2.setCurrentText(str(x[0]))
               self.comboBox.setCurrentText(str(x[1]))
               self.comboBox_3.setCurrentText(str(x[2]))
               self.label_8.setText(str(x[4]))
               self.label_10.setText(str(x[5][0:17]))               
               if(str(x[3]) == "Yes"):
                   self.radioButton.setEnabled(True)
                   self.radioButton_2.setDisabled(True)                   
               else:
                   self.radioButton_2.setEnabled(True)
                   self.radioButton.setDisabled(True)  
               
        connection.close()
        self.start_wt()
        
       
    
    def ld_set_fun(self):
        connection = sqlite3.connect("fci.db")
        with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET LD_SET='"+self.comboBox_2.currentText()+"'")                    
        connection.commit();                    
        connection.close()
        self.label_44.setText("Successfully Configured LD.")
        self.label_44.show()
        self.ld_flag="Yes"
       
        
    def capacity_set(self):
        connection = sqlite3.connect("fci.db")
        with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET CAPACITY_SET='"+self.comboBox.currentText()+"'")                    
        connection.commit();                    
        connection.close()
        self.label_44.setText("Successfully Configured Capacity.")
        self.label_44.show()
        self.capacity_flag="Yes"
        
    
    def off_position_set(self):
        connection = sqlite3.connect("fci.db")
        with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET OFF_POSITION_SET='"+self.comboBox_3.currentText()+"'")                    
        connection.commit();                    
        connection.close()
        self.label_44.setText("Successfully Configured OFF Position.")
        self.label_44.show()
        self.off_position_flag="Yes"
       
    
    def flag_set(self):        
        if(self.radioButton.isChecked()):
            self.flag="Yes"
        else:
             self.flag="No"
        connection = sqlite3.connect("fci.db")
        with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET FLAG_SET='"+self.flag+"'")                    
        connection.commit();                    
        connection.close()
        self.label_44.setText("Successfully Configured Flag.")
        self.label_44.show()
        self.off_position_flag="Yes"
   
        
    def pre_calibration_steps(self):
        self.label_41.show()
        self.pushButton_17.show()
        self.lineEdit.show()
        self.frame_3.show()        
        try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                              )
                '''
                #=============
                self.command_str="T"
                print("Tare Command : "+str(self.command_str))
                b = bytes(self.command_str, 'utf-8')
                self.ser.write(b)
                #=============
                '''
                #self.label_44.setText("Tare Done. Please Callibrate now" )  
                #self.label_44.show()
        except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()
        
    def start_calibration(self):
        if(self.lineEdit.text() != ""):            
            connection = sqlite3.connect("fci.db")
            with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE GLOBAL_VAR SET CALIBRATION_LOAD_SET='"+self.lineEdit.text()+"'")                    
            connection.commit();                    
            connection.close()
        
            try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                                )
                
                
                self.ser.flush()
              
                self.count_before=self.count_value
                self.c_wt=0
                self.c_wt=int(self.lineEdit.text())
                if(int(self.c_wt) > 0):
                    self.command_str=str(self.c_wt)+"\r\n"
                    print("Callibration Command1 : "+str(self.command_str))
                    b = bytes(self.command_str, 'utf-8')
                    self.ser.write(b)
                    time.sleep(0.5)
                    self.command_str="C"
                    print("Callibration Command2 : "+str(self.command_str))
                    b = bytes(self.command_str, 'utf-8')
                    self.ser.write(b)
                    
                    self.label_44.setText("Calibration is Done succefully." )  
                    self.label_44.show()
                    
                    self.count_after=self.count_value
                    if(self.count_after > self.count_before): 
                            self.k_factor=float(int(self.count_after)-int(self.count_before)/int(self.c_wt))
                    else:
                            self.k_factor=float(int(self.count_before)-int(self.count_after)/int(self.c_wt))
                    
                    
                    connection = sqlite3.connect("fci.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("UPDATE GLOBAL_VAR SET K_FACTOR='"+str(self.k_factor)+"',LAST_CALIBRATION_DT='"+str(self.label_20.text())+"',C2_COUNT='"+str(self.count_value)+"'")                    
                            cursor.execute("UPDATE GLOBAL_VAR SET K_FACTOR=((C2_COUNT-C1_COUNT)/CALIBRATION_LOAD_SET)")
                            cursor.execute("UPDATE GLOBAL_VAR SET K_FACTOR=(K_FACTOR*(-1)) WHERE K_FACTOR < 0")  
                    
                    connection.commit();                    
                    connection.close()
                    connection = sqlite3.connect("fci.db")
                    results=connection.execute("SELECT K_FACTOR,LAST_CALIBRATION_DT FROM GLOBAL_VAR  ") 
                    for x in results:
                            self.label_8.setText(str(x[0]))
                            self.label_10.setText(str(x[1][0:17]))
                    connection.close()
                    
                else:
                    self.label_44.setText("Calibration Error." )  
                    self.label_44.show()
                time.sleep(1)
                #self.pushButton_16.show()
                connection = sqlite3.connect("fci.db")
                with connection:        
                    cursor = connection.cursor()
                    cursor.execute("INSERT INTO CALIBRATION_LOG(USER_NAME,USER_ID,LD_SET,CAPACITY_SET ,OFF_POSITON_SET ,FLAG_SET ,CALI_WT,K_FACTOR)  select LOGIN_USER_NAME,LOGIN_USER_ID,LD_SET,CAPACITY_SET,OFF_POSITION_SET,FLAG_SET,CALIBRATION_LOAD_SET,K_FACTOR from global_var")                    
                connection.commit();                    
                connection.close()
                self.log_audit("Callibration"," Callibration done")
            except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()
        else:
            self.label_44.setText("Please Enter the Load used." )  
            self.label_44.show()
    
    def verify_job(self):
        self.timer3.setInterval(5000)        
        self.timer3.timeout.connect(self.verify)
        self.timer3.start(1)
    
    def verify(self):
        try:
            self.line1 = self.ser.readline()
            print(" xxxxxxxx"+str(self.line1))
            print("zzzzzz:"+str(self.line1,'utf-8'))
            self.xstr10=str(self.line1,'utf-8')
            self.xstr11=self.xstr10.replace("\r","")
            self.xstr12=self.xstr11.replace("\n","")
            self.buff1=self.xstr12.split("_")
            print("xstr12:"+str(self.xstr12))
            if(len(self.buff1)> 1):
                    #if(str(self.buff1[3]) == 'R'): 
                        self.label_44.setText("Current Weight is : "+str(self.buff1[0])+" kg." )  
                        self.label_44.show()
                    #else:
                    #    self.label_44.setText("Retry" )  
                    #    self.label_44.show()
            else:
                self.label_44.setText("")  
                self.label_44.show()
        except IOError:
            #print("IO Errors")
            self.label_44.setText("IO Errors" )  
            self.label_44.show()
    
    def stop_timer3(self):
       if(self.timer3.isActive()):
           self.timer3.stop(1)           
           
            
            
    def start_wt(self):
        #print("Weight Started ....")
        try:
            self.ser = serial.Serial(
                                port='/dev/ttyAMA0',
                                baudrate=115200,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                xonxoff=False,
                                timeout = 0.05
                            )
        
            self.ser.flush()       
                     
            
            
            self.line = self.ser.readline(15)
            print("o/p:"+str(self.line))
             
            self.timer2.setInterval(5000)        
            self.timer2.timeout.connect(self.display_lcd_val)
            self.timer2.start(1)
            
            
        except IOError:
            print("IO Errors-load cell connections error")
            self.IO_error_flg=1
            self.label_44.setText("LOAD CELL CONNECTION ERROR")  
            self.label_44.show()
            self.stop_timer()
            
            
    def display_lcd_val(self):               
        #print(" inside display_lcd_val:"+str(self.IO_error_flg))
        if(self.IO_error_flg==0):
            try:
                self.line = self.ser.readline()
                print(" raw o/p:"+str(self.line))
                print("self.line:"+str(self.line,'utf-8'))
                self.xstr0=str(self.line,'utf-8')
                self.xstr1=self.xstr0.replace("\r","")
                self.xstr2=self.xstr1.replace("\n","")
                self.buff=self.xstr2.split("_")
                self.last_value=self.current_value 
                if(len(self.buff)> 1):
                        #if(str(self.buff[3]) == 'R'): 
                                self.xstr2=str(self.buff[0])
                                try:
                                     self.xstr4=int(self.xstr2)
                                except ValueError:                        
                                    print("Value Error"+str(self.xstr2))
                                    self.xstr4=0                    
                                try:
                                    #self.current_value=float(int(self.xstr4)/1000)
                                    self.count_value=float(int(self.buff[1]))
                                    
                                    if(int(self.ld_set) > 0):
                                        self.mod_val=0
                                        self.mod_val=(int(self.xstr4) % int(self.ld_set))
                                        self.mod_val=int(self.xstr4)-self.mod_val
                                        print("min :"+str(self.weighing_crosses_min_wt_lim)+" current val :"+str(self.current_value)+" min_wt_lim:"+str(self.wt_min_limit))
                                        print("max :"+str(self.weighing_crosses_max_wt_lim))                                
                                        if(self.weighing_crosses_min_wt_lim=="No"):
                                                self.lcdNumber_2.setProperty("value", "0")
                                                #self.lcdNumber.display("0")
                                                self.current_value=int(self.mod_val)
                                        elif(self.weighing_crosses_max_wt_lim=="Yes"):    
                                                self.lcdNumber_2.setProperty("value", "-1")
                                                self.lcdNumber_2.display("SORRY")
                                                self.current_value=int(self.mod_val)
                                        else:
                                                self.lcdNumber_2.setProperty("value", str(self.mod_val))                                                
                                                self.current_value=int(self.mod_val)
                                        
                                        #self.lcdNumber_2.setProperty("value", str(self.mod_val))
                                        #self.current_value=int(self.mod_val)
                                    else:
                                        self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                    
                                    
                                   
                                except ValueError:
                                    print("Value Error :"+str(self.xstr4))
                                    self.xstr4=0
                                    self.current_value=0                    
                                #self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                self.lcdNumber.setProperty("value", str(self.count_value))
                                
                                if(self.enable_buttons_flag=="Yes"):
                                       self.lcdNumber_2.setStyleSheet("color: rgb(0, 170, 0);\n background-color: rgb(0, 0, 0);")
                                else:
                                       self.lcdNumber_2.setStyleSheet("color: rgb(255, 0, 0);\n background-color: rgb(0, 0, 0);")
                                
                                if(int(self.current_value) > int(self.wt_min_limit)):                                                     
                                          self.weighing_crosses_min_wt_lim="Yes"
                                else:
                                          self.weighing_crosses_min_wt_lim="No"
                                
                                if(int(self.current_value) > int(self.wt_max_limit)):                                                     
                                          self.weighing_crosses_max_wt_lim="Yes"
                                else:
                                          self.weighing_crosses_max_wt_lim="No"
                                
                                #print("enable_buttons_flag :"+str(self.enable_buttons_flag)+" self.last_value :"+str(self.last_value)+" self.current_value :"+str(self.current_value))
                                                      
                                                      
                                if(self.last_value==self.current_value):
                                        self.enable_counter=self.enable_counter+1
                                        if(self.enable_counter > 15):
                                             self.enable_buttons_flag="Yes"                                             
                                        else:                                             
                                             self.enable_buttons_flag="No"                                            
                                else:            
                                        self.enable_buttons_flag="No"
                                        self.enable_counter=0
                                
                    
            except IOError:
                print("IO Errors : Data Read Error") 
                self.IO_error_flg=1
                self.label_44.setText("DATA READ ERROR")  
                self.label_44.show()
    
    def stop_timer(self):
       if(self.timer2.isActive()):
           self.timer2.stop(1)           
           self.command_str="T"
           print("Stop Command : "+str(self.command_str))
           b = bytes(self.command_str, 'utf-8')
           self.ser.write(b)
    
    def open_new_window(self):       
        self.window = QtWidgets.QMainWindow()
        self.ui=fci_37_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()
        
    def log_audit(self,event_name,desc_str):        
        connection = sqlite3.connect("fci.db")
        with connection:        
            cursor = connection.cursor()       
            cursor.execute("INSERT INTO AUDIT_MST(AUDIT_TYPE,MESSAGE) VALUES(?,?)",(event_name,desc_str))
            cursor.execute("UPDATE AUDIT_MST SET USER_ID = (SELECT LOGIN_USER_ID FROM GLOBAL_VAR) WHERE USER_ID IS NULL")            
        connection.commit();
        connection.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_35_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
