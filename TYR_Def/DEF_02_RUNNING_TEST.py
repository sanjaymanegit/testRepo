# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '02_RUNNING_TEST.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from DEF_06_TEST_DETAILS import def_06_Ui_MainWindow

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QVBoxLayout, QSizePolicy, QMessageBox, QWidget, QPushButton

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.animation as animation
import matplotlib.pyplot as plt

import datetime
import serial
import time
#import array  as arr
import numpy as np
import sqlite3


class def_02_Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 768)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 20, 1321, 691))
        self.frame.setStyleSheet("background-color: rgb(217, 255, 235);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        self.frame.setObjectName("frame")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(220, 30, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(410, 30, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-color: rgb(211, 211, 211);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(1070, 30, 211, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(580, 30, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("background-color: rgb(211, 211, 211);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(40, 30, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("background-color: rgb(115, 231, 0);")
        self.pushButton_4.setObjectName("pushButton_4")
        
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setGeometry(QtCore.QRect(750, 30, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("background-color: rgb(211, 211, 211);")
        self.pushButton_7.setObjectName("pushButton_7")
        
        self.pushButton_7_1 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7_1.setGeometry(QtCore.QRect(900, 30, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7_1.setFont(font)
        self.pushButton_7_1.setStyleSheet("background-color: rgb(211, 211, 211);")
        self.pushButton_7_1.setObjectName("pushButton_7_1")
        
        
        self.widget = QtWidgets.QWidget(self.frame)
        self.widget.setGeometry(QtCore.QRect(50, 110, 1221, 531))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(self.widget)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1366, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.started_plot_flg=0
        self.saved_flg=0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "STOP"))
        self.pushButton_2.setDisabled(True)
        self.pushButton_3.setText(_translate("MainWindow", "SAVE"))
        self.pushButton_3.setDisabled(True)
        self.pushButton_3.hide()
        self.label.setText(_translate("MainWindow", "09 Feb 2021 11:34"))
        self.pushButton_6.setText(_translate("MainWindow", "RETURN"))
        self.pushButton_6.setDisabled(True)
        self.pushButton_4.setText(_translate("MainWindow", "START"))
        self.pushButton_7.setText(_translate("MainWindow", "DETAILS"))
        self.pushButton_7_1.setText(_translate("MainWindow", "HOLD"))
        self.label_2.setText(_translate("MainWindow", "START TEST"))
        self.label_2.hide()
        self.pushButton_6.clicked.connect(MainWindow.close)
        self.pushButton_7_1.clicked.connect(self.on_return)
        
        #app.aboutToQuit.connect(self.closeEvent)

        self.pushButton_4.clicked.connect(self.start_test)
        self.pushButton_2.clicked.connect(self.stop_test)
        #self.pushButton_3.clicked.connect(self.save_test_data)
        self.pushButton_7.clicked.connect(self.open_new_window)
        
        #self.blank_graph()
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1)
        self.check_test_status()
    
    
    def save_test_data(self):
        if(self.started_plot_flg==1):
            self.start_plot.on_stop()
            time.sleep(1)
            '''
            connection = sqlite3.connect("def.db")              
            with connection:        
                 cursor = connection.cursor()
                 for d in range(len(self.start_plot.arr_p)):
                         cursor.execute("INSERT INTO GRAPH_MST_TMP(X_NUM,Y_NUM) VALUES('"+str(self.start_plot.arr_p[d])+"','"+str(self.start_plot.arr_q[d])+"')")                         
            connection.commit();
            connection.close()
            '''
            self.saved_flg=1
        close = QMessageBox()
        close.setText("Confirm Before to Stop Test ")
        close.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        close = close.exec()
        if close == QMessageBox.Yes:
            connection = sqlite3.connect("def.db")
            with connection:        
                        cursor = connection.cursor()
                        cursor.execute("INSERT INTO GRAPH_MST(X_NUM,Y_NUM) SELECT X_NUM,Y_NUM FROM GRAPH_MST_TMP")
                        cursor.execute("UPDATE GRAPH_MST SET GRAPHI_ID=(SELECT MAX(IFNULL(GRAPHI_ID,0))+1 FROM GRAPH_MST) WHERE GRAPHI_ID IS NULL")
                        cursor.execute("UPDATE TEST_MST SET GRAPHI_ID=(SELECT MAX(IFNULL(GRAPHI_ID,0)) FROM GRAPH_MST) WHERE GRAPHI_ID IS NULL")
                        cursor.execute("DELETE FROM GRAPH_MST_TMP")
            connection.commit();                    
            connection.close()
            self.label_2.setText("TEST  SAVED")
            self.label_2.show()
        else:
            self.label_2.setText("TEST  NOT SAVED")
            self.label_2.show()
        #self.pushButton_3.setDisabled(True)
        
    
    def on_return(self):
        if(self.started_plot_flg==1):
            self.start_plot.on_stop()
            time.sleep(1)
            if(self.saved_flg==0):
                '''
                connection = sqlite3.connect("def.db")              
                with connection:        
                     cursor = connection.cursor()
                     for d in range(len(self.start_plot.arr_p)):
                             cursor.execute("INSERT INTO GRAPH_MST_TMP(X_NUM,Y_NUM) VALUES('"+str(self.start_plot.arr_p[d])+"','"+str(self.start_plot.arr_q[d])+"')")                         
                connection.commit();
                connection.close()
                '''
                pass
            self.pushButton_6.setEnabled(True)
           
        
        
     
    def check_test_status(self):
        self.test_cnt=0
        connection = sqlite3.connect("def.db")
        results=connection.execute("SELECT COUNT(TEST_ID) FROM TEST_MST WHERE STATUS='RUNNING'") 
        for x in results:
            self.test_cnt=str(x[0])
        connection.close()
        if(int(self.test_cnt)==0):            
            self.pushButton_4.setEnabled(True)
            self.pushButton_2.setDisabled(True)
            self.label_2.setText("PLEASE START TEST")
            self.label_2.show()
            self.blank_graph()            
        else:
            self.pushButton_4.setDisabled(True)
            self.pushButton_2.setEnabled(True)
            self.label_2.setText("RUNNING")
            self.label_2.show()
            self.start_test()
    
    
    def device_date(self):     
        self.label.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M:%S"))
    
    def blank_graph(self):
        self.graph_blank =PlotCanvas_blank(self,width=5, height=2)                
        self.gridLayout.addWidget(self.graph_blank, 1, 0, 1, 1)
        
    def start_test(self):
        tmstamp=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        connection = sqlite3.connect("def.db")
        with connection:        
                    cursor = connection.cursor()                    
                    cursor.execute("UPDATE TEST_MST SET STATUS = 'RUNNING',TEST_START_ON = '"+str(tmstamp)+"' WHERE STATUS='PENDING' ")
        connection.commit();                    
        connection.close()
        
        self.start_plot =PlotCanvas_Auto(self,width=5, height=4, dpi=80)
        self.started_plot_flg=1
        #self.verticalLayout.addWidget(self.start_plot)
        self.gridLayout.addWidget(self.start_plot, 1, 0, 1, 1)
        #self.gridLayout.addWidget(self.start_plot, 0, 0, 1, 4)
        self.pushButton_4.setDisabled(True)
        self.pushButton_2.setEnabled(True)
        self.label_2.setText("TEST STARTED")
        self.label_2.show()
 
    def stop_test(self):        
        connection = sqlite3.connect("def.db")              
        with connection:        
                    cursor = connection.cursor()
                    cursor.execute("UPDATE TEST_MST SET STATUS = 'STOPPED'  WHERE STATUS='RUNNING' ")          
        connection.commit();
        connection.close()
        self.start_plot.on_stop()
        self.pushButton_4.setEnabled(True)
        self.pushButton_2.setDisabled(True)
        self.pushButton_6.setEnabled(True)
        self.pushButton_3.setDisabled(True)
        print("Test Stopped !!")
        self.label_2.setText("TEST STOPPED")
        self.label_2.show()
        self.save_test_data()
  
     
    def open_new_window(self):       
        self.window = QtWidgets.QMainWindow()
        self.ui=def_06_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()   
       

class PlotCanvas_blank(FigureCanvas):
    def __init__(self, parent=None, width=5, height=2, dpi=80):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)        
        FigureCanvas.__init__(self, fig)
        #self.setParent(parent)
        FigureCanvas.setSizePolicy(self,
                QSizePolicy.Expanding,
                QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)
        self.plot_blank()        
        
    def plot_blank(self):                
        
        connection = sqlite3.connect("def.db")              
        with connection:        
                cursor = connection.cursor()                            
                cursor.execute("DELETE FROM GRAPH_MST_TMP")                            
        connection.commit()
        connection.close()
        
        self.x=[0,0,0,0,0,0,0,0]
        self.y=[0,0,0,0,0,0,0,0]
        
        self.p=list()
        self.q=list()
      
        ax = self.figure.add_subplot(111)
        #ax.set_facecolor('#CCFFFF')
        ax.minorticks_on()
        ax.grid(which='major', linestyle='-', linewidth='0.2', color='red')
        ax.grid(which='minor', linestyle=':', linewidth='0.2', color='black')
        
        self.test_count=0
        connection = sqlite3.connect("def.db")
        results=connection.execute("SELECT count(*) TEST_MST")
        for k in results:        
                self.test_count=str(k[0])              
        connection.close()
        
        if(int(self.test_count) > 0):
                connection = sqlite3.connect("def.db")
                results=connection.execute("SELECT MAX_FORCE,MAX_TIME FROM TEST_MST ORDER BY TEST_ID DESC LIMIT 1")
                for k in results:        
                        self.axes.set_ylim(0,int(str(k[0])))
                        self.axes.set_xlim(0,float(str(k[1])))
                connection.close()
        else:        
                self.axes.set_xlim(0,500)
                self.axes.set_ylim(0,500)
       
        '''
        for i in range(len(self.x)):
              self.p.append(self.x[i])
              self.q.append(self.y[i])  
        '''      
        ax.plot(self.x,self.y,'b')
        ax.set_ylabel('FORCE (Kgf)')
        ax.set_xlabel('DURATION (Hr)')
        
        
        self.draw()
    
    

class PlotCanvas_Auto(FigureCanvas):     
    def __init__(self, parent=None, width=5, height=4, dpi=80):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)      
        self.compute_initial_figure()
        FigureCanvas.__init__(self, fig)
        #self.setParent(parent)
        self.start_time = datetime.datetime.now()
        
        self.timer6=QtCore.QTimer()
        
        self.IO_error_flg=1  
        self.record_count=0
        self.prv_record_count=0
        self.p=0
        self.q=0
        self.arr_p=[]
        self.arr_q=[]
        self.rec_id=[]
        self.xstr0=""
        self.xstr1=""
        self.xstr2=""
        self.xstr4=0
        self.buff=[]
        self.i1=0
        self.j1=0
        self.j1_sec=0
        self.job_initialted=0
        self.data_log_time="5"
        self.mod_flag=0
        self.mod=0
        self.start_time = datetime.datetime.now()
        self.end_time = datetime.datetime.now()
        self.elapsed_time=0
        self.status=""
        self.plot_auto()
         
    def compute_initial_figure(self):
        pass
   
    
    
    def graph_update_from_db(self):         
         ### append appray from db
        self.end_time = datetime.datetime.now()
        self.elapsed_time=self.end_time-self.start_time
        self.elapsed_time =self.elapsed_time.days * 24 * 3600 + self.elapsed_time.seconds
        self.elapsed_time=int(self.elapsed_time)
        self.mod=int(self.elapsed_time) % 10        
        if(int(self.mod)==0):
             self.arr_p=[]
             self.arr_q=[]
             connection = sqlite3.connect("def.db")
             results=connection.execute("select X_NUM,Y_NUM FROM GRAPH_MST_TMP")
             for x in results:        
                       self.arr_p.append(int(x[0]))
                       self.arr_q.append(int(x[1])) 
             connection.close()
             print("Arry Populated !!!!!")
        else:
             pass
     
    def plot_auto(self):        
        #self.axes.set_facecolor('#CCFFFF')
        self.line_cnt, = self.axes.plot([0,0], [0,0], lw=2)
        self.v_cnt=0
        self.t=0
        self.xstr3=""
        self.playing = False
        self.IO_error_flg=0
        self.IO_error_flg2=0
        self.axes.minorticks_on()
        self.axes.set_xlabel('DURATION (Hr)')
        self.axes.set_ylabel('FORCE (Kgf)')
        self.axes.set_autoscale_on(True)
        self.max_load=0
        self.test_count=0
        connection = sqlite3.connect("def.db")
        results=connection.execute("SELECT count(*) TEST_MST")
        for k in results:        
                self.test_count=str(k[0])              
        connection.close()
        
        if(int(self.test_count) > 0):
                connection = sqlite3.connect("def.db")
                results=connection.execute("SELECT MAX_FORCE,MAX_TIME,(IFNULL(DATA_LOG_TIME,5)*60*60),TEST_ID FROM TEST_MST WHERE STATUS='RUNNING' LIMIT 1")
                for k in results:        
                        self.axes.set_ylim(0,int(str(k[0])))
                        self.axes.set_xlim(0,float(str(k[1])))
                        self.data_log_time=int(k[2])
                        self.max_load=int(k[0])
                        self.axes.set_title('Report of Test Id:'+str(k[3]).zfill(4))
                        print("self.data_log_time :"+str(self.data_log_time))
                connection.close()
        else:        
                self.axes.set_xlim(0,500)
                self.axes.set_ylim(0,500)
        
        self.test_count=0
        connection = sqlite3.connect("def.db")
        results=connection.execute("SELECT count(*) GRAPH_MST_TMP")
        for k in results:        
                self.test_count=str(k[0])              
        connection.close()
        if(int(self.test_count) > 0):
            connection = sqlite3.connect("def.db")
            results=connection.execute("SELECT IFNULL(Y_NUM,0) FROM GRAPH_MST_TMP order by Y_NUM DESC LIMIT 1")
            for x in results:        
                  self.j1=str(x[0])      
            connection.close()
        else:
            self.j1=0
        
        '''
        if(int(self.test_count) > 0):
            connection = sqlite3.connect("def.db")
            results=connection.execute("SELECT X_NUM,Y_NUM FROM GRAPH_MST_TMP")
            for k in results:        
                        self.arr_p.append(int(k[0]))
                        self.arr_q.append(int(k[1]))
                        self.status="RUNNING"
            connection.close()
        else:
            self.status=""
        '''
    
        
        self.axes.grid(which='major', linestyle='-', linewidth='0.2', color='red')
        self.axes.grid(which='minor', linestyle=':', linewidth='0.2', color='black')
        #self.line_cnt, = self.axes.plot([], [], animated=True, lw=1.5,color='#04756A')
        self.timer6.setInterval(5000)        
        self.timer6.timeout.connect(self.graph_update_from_db)
        self.timer6.start(1)
        self.on_start()
          
            
    
    
        
    def on_start(self):    
        if self.playing:
            pass
        else:
            self.playing = True
            self.ani = animation.FuncAnimation(
                self.figure,
                self.plot_grah_only,
                blit=True, interval=1000
                    )
            print("Done1-On_start")
           
           
           
    
    def plot_grah_only(self,i):        
        self.line_cnt.set_data(self.arr_p,self.arr_q) 
        return [self.line_cnt]
    
    
        
        
    def on_stop(self):
        if(self.timer6.isActive()): 
                   self.timer6.stop()                                                                                                      
                   print("Time 6 has been stopped ")
        if self.playing:
            self.playing = False
            self.end_time = time.time()
            self.ani._stop()
            #self.ani_2._stop()
            print("ani stopped !!!")
            
                   
                   
        else:
            pass
        
   
    


        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)    
    MainWindow = QtWidgets.QMainWindow()
    ui = def_02_Ui_MainWindow()
    ui.setupUi(MainWindow)   
    MainWindow.show()
    sys.exit(app.exec_())
