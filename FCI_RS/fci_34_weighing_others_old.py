# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fci_34_weighing_others.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
import sqlite3
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator
import re
import os,sys
import serial,time

#### pdf library
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.pagesizes import landscape, letter,inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, BaseDocTemplate, Frame, Paragraph, NextPageTemplate, PageBreak, PageTemplate
from reportlab.lib import colors


class fci_34_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 769)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        MainWindow.setStyleSheet("background-color: rgb(135, 206, 235);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(25, 25, 1321, 718))
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        
        self.frame.setStyleSheet("background-color: rgb(135, 206, 235);")
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(780, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(850, 10, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(189, 255, 255);\n")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(430, 640, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        self.pushButton_6.setGeometry(QtCore.QRect(600, 640, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setGeometry(QtCore.QRect(900, 640, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(17, 10, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("")
        self.label_20.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.label_19 = QtWidgets.QLabel(self.frame)
        self.label_19.setGeometry(QtCore.QRect(110, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_19.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(1000, 10, 71, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_14 = QtWidgets.QLabel(self.frame)
        self.label_14.setGeometry(QtCore.QRect(320, 300, 151, 71))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(15)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_14.setFont(font)       
        self.label_14.setStyleSheet("")
        self.label_14.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_14.setObjectName("label_14")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        self.pushButton_8.setGeometry(QtCore.QRect(760, 640, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.radioButton = QtWidgets.QRadioButton(self.frame)
        self.radioButton.setGeometry(QtCore.QRect(270, 190, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(False)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_2.setGeometry(QtCore.QRect(350, 190, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        
        self.listWidget_3 = QtWidgets.QListWidget(self.frame)
        self.listWidget_3.setStyleSheet("background-color: rgb(189, 255, 255);")
        self.listWidget_3.setGeometry(QtCore.QRect(20, 300, 271, 351))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.listWidget_3.setFont(font)
        self.listWidget_3.setObjectName("listWidget_3")
        
        
        self.label_22 = QtWidgets.QLabel(self.frame)
        self.label_22.setGeometry(QtCore.QRect(30, 250, 161, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_22.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.label_25 = QtWidgets.QLabel(self.frame)
        self.label_25.setGeometry(QtCore.QRect(470, 60, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("")
        self.label_25.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.frame)
        self.label_26.setGeometry(QtCore.QRect(470, 100, 111, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("")
        self.label_26.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.frame)
        self.label_27.setGeometry(QtCore.QRect(470, 140, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("")
        self.label_27.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.frame)
        self.label_28.setGeometry(QtCore.QRect(470, 180, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("")
        self.label_28.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(730, 100, 20, 121))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_29 = QtWidgets.QLabel(self.frame)
        self.label_29.setGeometry(QtCore.QRect(610, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_29.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.frame)
        self.label_30.setGeometry(QtCore.QRect(610, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_30.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.frame)
        self.label_31.setGeometry(QtCore.QRect(610, 140, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_31.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.label_32 = QtWidgets.QLabel(self.frame)
        self.label_32.setGeometry(QtCore.QRect(610, 180, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("background-color: rgb(189, 255, 255); color: rgb(255, 0, 0);")
        self.label_32.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.frame)
        self.label_33.setGeometry(QtCore.QRect(750, 60, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("")
        self.label_33.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.frame)
        self.label_34.setGeometry(QtCore.QRect(750, 100, 131, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("")
        self.label_34.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.frame)
        self.label_35.setGeometry(QtCore.QRect(750, 140, 141, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("")
        self.label_35.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.frame)
        self.label_36.setGeometry(QtCore.QRect(750, 180, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("")
        self.label_36.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.frame)
        self.label_37.setGeometry(QtCore.QRect(910, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_37.setFont(font)
        self.label_37.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_37.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.frame)
        self.label_38.setGeometry(QtCore.QRect(910, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_38.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(self.frame)
        self.label_39.setGeometry(QtCore.QRect(910, 140, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_39.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_39.setObjectName("label_39")
        self.label_40 = QtWidgets.QLabel(self.frame)
        self.label_40.setGeometry(QtCore.QRect(910, 180, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_40.setFont(font)
        self.label_40.setStyleSheet("background-color: rgb(189, 255, 255); color: rgb(255, 0, 0);")
        self.label_40.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_40.setObjectName("label_40")
        self.lcdNumber = QtWidgets.QLCDNumber(self.frame)
        self.lcdNumber.setGeometry(QtCore.QRect(17, 50, 361, 121))
        self.lcdNumber.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lcdNumber.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber.setFrameShadow(QtWidgets.QFrame.Plain)
        self.lcdNumber.setLineWidth(4)
        self.lcdNumber.setDigitCount(7)       
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(0, 200, 0);")
        self.lcdNumber.setProperty("value", 20000.0)
        self.lcdNumber.setObjectName("lcdNumber")
        self.pushButton_11 = QtWidgets.QPushButton(self.frame)
        self.pushButton_11.setGeometry(QtCore.QRect(30, 190, 91, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setBold(True)
        
        self.pushButton_11.setFont(font)
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_16 = QtWidgets.QPushButton(self.frame)
        self.pushButton_16.setGeometry(QtCore.QRect(140, 190, 91, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setPointSize(12)
        font.setBold(True)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setObjectName("pushButton_16")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(520, 300, 321, 71))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: rgb(189, 255, 255);\n"
"font: 24pt \"MS Shell Dlg 2\";")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(460, 220, 551, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_44 = QtWidgets.QLabel(self.frame)
        self.label_44.setGeometry(QtCore.QRect(750, 230, 151, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_44.setFont(font)
        self.label_44.setStyleSheet("")
        self.label_44.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(self.frame)
        self.label_45.setGeometry(QtCore.QRect(910, 236, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_45.setFont(font)
        self.label_45.setStyleSheet("background-color: rgb(189, 255, 255); color: rgb(0, 170, 0);")
        self.label_45.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_45.setObjectName("label_45")
        self.label_47 = QtWidgets.QLabel(self.frame)
        self.label_47.setGeometry(QtCore.QRect(1105, 10, 197, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setBold(True)
        font.setPointSize(12)        
        self.label_47.setFont(font)
        self.label_47.setStyleSheet("color: rgb(0, 0, 0);")        
        self.label_47.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_47.setObjectName("label_47")
        self.label_51 = QtWidgets.QLabel(self.frame)
        self.label_51.setGeometry(QtCore.QRect(1105, 330, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_51.setFont(font)
        self.label_51.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_51.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_51.setObjectName("label_51")
        
        
        self.buttongroup = QtWidgets.QButtonGroup()
        
        self.radioButton_3 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_3.setGeometry(QtCore.QRect(1190, 330, 41, 21))
        self.radioButton_3.setChecked(False)
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_4.setGeometry(QtCore.QRect(1250, 330, 51, 21))
        self.radioButton_4.setObjectName("radioButton_4")
        
        self.buttongroup.addButton(self.radioButton_3, 1)
        self.buttongroup.addButton(self.radioButton_4, 2)
        
        self.label_58 = QtWidgets.QLabel(self.frame)
        self.label_58.setGeometry(QtCore.QRect(470, 10, 261, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(18)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_58.setFont(font)
        self.label_58.setStyleSheet("color: rgb(0, 0, 225);")
        self.label_58.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_58.setObjectName("label_58")
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_2.setGeometry(QtCore.QRect(1070, 70, 221, 121))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.radioButton_5 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_5.setGeometry(QtCore.QRect(20, 30, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setChecked(False)
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_6.setGeometry(QtCore.QRect(130, 30, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setChecked(False)
        self.radioButton_6.setObjectName("radioButton_6")
        self.pushButton_14 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_14.setGeometry(QtCore.QRect(130, 70, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setObjectName("pushButton_14")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.groupBox_2)
        
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_8)
        self.lineEdit_8.setValidator(input_validator)
        
        self.lineEdit_8.setGeometry(QtCore.QRect(20, 70, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setStyleSheet("background-color: rgb(189, 255, 255)")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_3.setGeometry(QtCore.QRect(1070, 210, 221, 111))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.radioButton_7 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_7.setGeometry(QtCore.QRect(20, 20, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_7.setFont(font)
        self.radioButton_7.setChecked(False)
        self.radioButton_7.setObjectName("radioButton_7")
        self.radioButton_8 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_8.setGeometry(QtCore.QRect(120, 20, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_8.setFont(font)
        self.radioButton_8.setChecked(False)
        self.radioButton_8.setObjectName("radioButton_8")
        self.pushButton_15 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_15.setGeometry(QtCore.QRect(130, 60, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setObjectName("pushButton_15")
        
        self.lineEdit_9 = QtWidgets.QLineEdit(self.groupBox_3)
        reg_ex = QRegExp("\d+")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_9)
        self.lineEdit_9.setValidator(input_validator)
        
        self.lineEdit_9.setGeometry(QtCore.QRect(20, 60, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_9.setFont(font)
        self.lineEdit_9.setStyleSheet("background-color: rgb(189, 255, 255);\n")
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.label_59 = QtWidgets.QLabel(self.frame)
        self.label_59.setGeometry(QtCore.QRect(240, 240, 331, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(15)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_59.setFont(font)
        self.label_59.setStyleSheet("color: rgb(0, 0, 255);")
        self.label_59.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_59.setObjectName("label_59")
        self.pushButton_12 = QtWidgets.QPushButton(self.frame)
        self.pushButton_12.setGeometry(QtCore.QRect(30, 240, 201, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setBold(True)
        self.pushButton_12.setFont(font)        
        self.pushButton_12.setObjectName("pushButton_12")
        self.label_53 = QtWidgets.QLabel(self.frame)
        self.label_53.setGeometry(QtCore.QRect(400, 150, 31, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_53.setFont(font)
        self.label_53.setStyleSheet("")
        self.label_53.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_53.setObjectName("label_53")
        self.label_15 = QtWidgets.QLabel(self.frame)
        self.label_15.setGeometry(QtCore.QRect(370, 400, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("")
        self.label_15.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_15.setObjectName("label_15")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_10.setGeometry(QtCore.QRect(520, 400, 321, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setStyleSheet("background-color: rgb(189, 255, 255);\n")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_16 = QtWidgets.QLabel(self.frame)
        self.label_16.setGeometry(QtCore.QRect(370, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("")
        self.label_16.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_16.setObjectName("label_16")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_11.setGeometry(QtCore.QRect(520, 470, 321, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_11.setFont(font)
        self.lineEdit_11.setStyleSheet("background-color: rgb(189, 255, 255);\n")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.label_17 = QtWidgets.QLabel(self.frame)
        self.label_17.setGeometry(QtCore.QRect(370, 530, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("")
        self.label_17.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_12)
        self.lineEdit_12.setValidator(input_validator)
        self.lineEdit_12.setGeometry(QtCore.QRect(520, 540, 101, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.lineEdit_12.setFont(font)
        self.lineEdit_12.setStyleSheet("background-color: rgb(189, 255, 255);\n")
        self.lineEdit_12.setObjectName("lineEdit_12")
        
        
        self.pushButton_7_1 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7_1.setGeometry(QtCore.QRect(1075, 560, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.pushButton_7_1.setFont(font)
        self.pushButton_7_1.setObjectName("pushButton_7_1")
        
        self.label_57_1 = QtWidgets.QLabel(self.frame)
        self.label_57_1.setGeometry(QtCore.QRect(875, 560, 101, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_57_1.setFont(font)        
        self.label_57_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_57_1.setObjectName("label_57_1")
        
        self.comboBox_2_1 = QtWidgets.QComboBox(self.frame)
        self.comboBox_2_1.setGeometry(QtCore.QRect(940, 560, 50, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_2_1.addItem("")
        self.comboBox_2_1.addItem("")
        self.comboBox_2_1.addItem("")
        self.comboBox_2_1.addItem("")
        self.comboBox_2_1.setFont(font)
        self.comboBox_2_1.setStyleSheet("background-color: rgb(244, 186, 255); color:rgb(0, 0, 0)")
        self.comboBox_2_1.setObjectName("comboBox_2_1")
        
        
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1366, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        ##### Variables initialiseations #####
        self.vehicle_no=""
        self.materail_name=""
        self.party=""
        self.remark=""
        self.batch_id=""
        self.status="FIRST"
        self.first_wt_mode=""
        self.first_wt_val=""            
        self.second_wt_mode=""
        self.second_wt_val=""
        self.weight_type=""
        self.accepted_bags=""
        self.avg_bag_wt=""            
        
        self.driver_in_out="OUT"                  
        self.proposed_bags=0            
        self.target_storage=""
        self.curr_truck_cnt=""
        self.total_truck_cnt=""
        self.contractor_id=""
        self.contractor_name=""
        self.device_location_type=""
        self.status="FIRST"
        self.current_slip_no=0
        self.current_value=0
        self.line =""
        self.IO_error_flg=0
        self.xstr3=""
        self.xstr2=""
        self.xstr4=""
        self.device_id=""
        self.login_user_id=""
        self.manual_ins_flg=""
        self.slot_no="0"
        self.quantity="0"
        self.slot_no2="0"
        self.quantity2="0"
        self.i=0
        self.j=0
        self.k=0
        self.issue_id=""
        self.slot_1_wt=0
        self.slot_2_wt=0
        self.save_diable=0
        self.slip_type=""
        self.gross_tare_flag=""
        
        ##########

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Serial. No."))
        self.pushButton_5.setText(_translate("MainWindow", "SAVE"))
        
        self.pushButton_7_1.setText(_translate("MainWindow", "VIEW PRINT"))
        self.label_57_1.setText(_translate("MainWindow", "Copies :"))
        self.comboBox_2_1.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox_2_1.setItemText(1, _translate("MainWindow", "2"))
        self.comboBox_2_1.setItemText(2, _translate("MainWindow", "3"))
        self.comboBox_2_1.setItemText(3, _translate("MainWindow", "4"))
        
        self.pushButton_6.setText(_translate("MainWindow", "RESET"))
        self.pushButton_7.setText(_translate("MainWindow", "RETURN"))
        self.label_20.setText(_translate("MainWindow", "Serial.No:"))
        self.label_19.setText(_translate("MainWindow", "00001"))
        self.pushButton_9.setText(_translate("MainWindow", "Search"))
        self.pushButton_9.setDisabled(True)
        self.label_14.setText(_translate("MainWindow", "VEHICLE NO :"))
        self.pushButton_8.setText(_translate("MainWindow", "PRINT"))
        self.radioButton.setText(_translate("MainWindow", "Auto"))
        self.radioButton_2.setText(_translate("MainWindow", "Manual"))
        '''
        __sortingEnabled = self.listWidget_3.isSortingEnabled()
        self.listWidget_3.setSortingEnabled(False)
        item = self.listWidget_3.item(0)
        item.setText(_translate("MainWindow", "001-MH430302"))
        item = self.listWidget_3.item(1)
        item.setText(_translate("MainWindow", "002-MH43RT09888"))
        item = self.listWidget_3.item(2)
        item.setText(_translate("MainWindow", "003-MH44AW3432"))
        self.listWidget_3.setSortingEnabled(__sortingEnabled)
        '''
        self.label_22.setText(_translate("MainWindow", "First Weight Trucks"))
        self.label_25.setText(_translate("MainWindow", "First Wt. Type :"))
        self.label_26.setText(_translate("MainWindow", "First Wt. Date :"))
        self.label_27.setText(_translate("MainWindow", "First Wt. Time :"))
        self.label_28.setText(_translate("MainWindow", "First Weight(Kg)  :"))
        self.label_29.setText(_translate("MainWindow", "Gross"))
        self.label_30.setText(_translate("MainWindow", "05 Aug 2020"))
        self.label_31.setText(_translate("MainWindow", "09:45"))
        self.label_32.setText(_translate("MainWindow", "200.000"))
        self.label_33.setText(_translate("MainWindow", "Second Wt. Type :"))
        self.label_34.setText(_translate("MainWindow", "Second Wt. Date :"))
        self.label_35.setText(_translate("MainWindow", "Second Wt. Time :"))
        self.label_36.setText(_translate("MainWindow", "Second Weight(Kg)  :"))
        self.label_37.setText(_translate("MainWindow", "Tare"))
        self.label_38.setText(_translate("MainWindow", "05 Aug 2020"))
        self.label_39.setText(_translate("MainWindow", "14:30"))
        self.label_40.setText(_translate("MainWindow", "41.000"))
        self.pushButton_11.setText(_translate("MainWindow", "Gross"))
        self.pushButton_11.hide()
        self.pushButton_16.setText(_translate("MainWindow", "Tare"))
        self.pushButton_16.hide()
        self.lineEdit_2.setText(_translate("MainWindow", "MH 43 AW 0302"))
        self.label_44.setText(_translate("MainWindow", "Net. Weight(Kg)  :"))
        self.label_45.setText(_translate("MainWindow", "159.00"))
        self.label_47.setText(_translate("MainWindow", "05 Aug 2020 14:23:00"))
        self.label_51.setText(_translate("MainWindow", "Driver :"))
        self.radioButton_3.setText(_translate("MainWindow", "In"))
        self.radioButton_4.setText(_translate("MainWindow", "Out"))
        self.label_58.setText(_translate("MainWindow", "OTHER WEIGHING"))
        self.groupBox_2.setTitle(_translate("MainWindow", "First Wt - Mannual"))
        self.radioButton_5.setText(_translate("MainWindow", "Gross"))
        self.radioButton_5.setChecked(True)
        self.radioButton_6.setText(_translate("MainWindow", "Tare"))
        self.pushButton_14.setText(_translate("MainWindow", "Update"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Second Wt - Mannual"))
        self.radioButton_7.setText(_translate("MainWindow", "Gross"))
        self.radioButton_8.setText(_translate("MainWindow", "Tare"))
        self.radioButton_8.setChecked(True)
        self.pushButton_15.setText(_translate("MainWindow", "Update"))
        self.label_59.setText(_translate("MainWindow", "Record Successfully saved !!!"))
        self.pushButton_12.setText(_translate("MainWindow", "New Weighing"))
        self.pushButton_12.hide()
        self.label_53.setText(_translate("MainWindow", "Kg."))
        self.label_15.setText(_translate("MainWindow", "Party Name :"))
        self.label_16.setText(_translate("MainWindow", "Material :"))
        self.label_17.setText(_translate("MainWindow", "Charges :"))
        self.pushButton_7.clicked.connect(MainWindow.close)
        self.lineEdit_12.setText("12")
        self.lineEdit_10.setText("10")
        self.lineEdit_11.setText("11")
        self.startx()
        
    def startx(self):
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        self.radioButton_3.setFont(font)
        self.radioButton_4.setFont(font)
        
        self.groupBox_2.hide()
        self.groupBox_3.hide()
        #self.groupBox.show()
        #self.groupBox_2.hide()
        self.timer2=QtCore.QTimer()
        
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1)
        
        self.radioButton_2.clicked.connect(self.mannual_onclick)
        self.radioButton.clicked.connect(self.auto_onclick)
        #self.reset_fun()
        self.pushButton_11.clicked.connect(self.gross_wt_onclick)
        self.pushButton_16.clicked.connect(self.tare_wt_onclick)
        self.pushButton_6.clicked.connect(self.reset_fun)
        self.pushButton_12.clicked.connect(self.reset_fun)
        self.pushButton_5.clicked.connect(self.save_data)
        self.pushButton_9.clicked.connect(self.fetch_via_search)
        
        self.lineEdit_2.textChanged.connect(self.text_change_f)
        self.lineEdit.textChanged.connect(self.text_change_mannual_first_wt)
        #self.lineEdit_4.textChanged.connect(self.text_change_mannual_second_wt)
       
        #self.lineEdit_4.textChanged.connect(self.avg_bags_wt_calc)
        
        #self.lineEdit_13.textChanged.connect(self.slot1_wt_calc)
        #self.lineEdit_11.textChanged.connect(self.slot2_wt_calc)
        self.pushButton_7_1.clicked.connect(self.open_pdf)
        
        
        
        
        self.lineEdit_2.setMaxLength(12)
        #self.listWidget_3.doubleClicked.connect(self.fetch_via_first_wt_vehical_list)
        #self.listWidget_2.doubleClicked.connect(self.fetch_via_second_wt_vehical_list)
        self.pushButton_14.clicked.connect(self.mannual_update1)
        self.pushButton_15.clicked.connect(self.mannual_update2)
        self.pushButton_8.clicked.connect(self.print_recipt)
        #self.checkBox.clicked.connect(self.slot2_enable)
        
        self.lineEdit.setText("0")
        #self.lineEdit_4.setText("0")
        #self.lineEdit_5.setText("7777") #serach line edit
        
        
       
        
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT LOGIN_USER_ID FROM GLOBAL_VAR") 
        for x in results:
            self.login_user_id=str(x[0])
        connection.close()
       # self.comboBox_3.currentTextChanged.connect(self.batch_id_onchange)
        #self.comboBox.currentTextChanged.connect(self.order_id_onchange)
        #self.comboBox_2.currentTextChanged.connect(self.material_name_onchange)
        #self.comboBox_4.currentTextChanged.connect(self.show_godown_name)
        #self.start_wt()
        self.reset_fun()
    
    
    def device_date(self):     
        self.label_47.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M:%S"))
        
    
    
    
    
    
    
    
    
            
    
            
    def mannual_update1(self,):
        mode=""
        m_str=0
        if(self.radioButton_5.isChecked()):
                mode="Gross"
        else:
                mode="Tare"
        
        if(mode != self.label_37.text()):
            if(self.lineEdit_8.text() != ""):
                    self.label_29.setText(str(mode))
                    m_str=self.lineEdit_8.text()               
                    self.label_32.setText(str(m_str))
                    self.lcdNumber.setProperty("value", str(m_str))
                    self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
                    self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
                    self.status="FIRST"
                
                
    def mannual_update2(self,):
        mode=""
        m_str=0
        if(self.radioButton_7.isChecked()):
                mode="Gross"
        else:
                mode="Tare"        
        if(mode != self.label_29.text()):
            if(self.lineEdit_9.text() != ""):
                    self.label_37.setText(str(mode))
                    m_str=self.lineEdit_9.text()
                    self.label_40.setText(str(m_str))
                    self.lcdNumber.setProperty("value", str(m_str))
                    self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
                    self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
                    self.net_wt_calc()
                    self.status="SECOND"
                

    def text_change_f(self):
        #print("insedie finct ")
        string =self.lineEdit_2.text()
        if not (string.isupper()):
               self.lineEdit_2.setText(string.upper())
               #print(string.upper())
               
    def text_change_mannual_first_wt(self):        
        if(self.lineEdit_8.text() == ""):
               self.lineEdit_8.setText("0")
        else:      
               print(self.lineEdit.text())
               
    def text_change_mannual_second_wt(self):        
        if(self.lineEdit_9.text() == ""):
               self.lineEdit_9.setText("0")
        else:      
               print(self.lineEdit_9.text())
               
    def mannual_onclick(self):
        self.manual_ins_flg="(*)"
        #print("insidde mannual :"+str(self.radioButton_2.isChecked()))
        if(self.radioButton_2.isChecked()):
            if(self.slip_type=="NEW"):
                self.groupBox_3.hide()
                self.groupBox_2.show()
                if(self.gross_tare_flag == "GROSS"):
                    self.radioButton_5.setChecked(True)
                    self.radioButton_6.hide()
                else:
                    self.radioButton_6.setChecked(True)
                    self.radioButton_5.hide()
                
            elif(self.slip_type=="OLD"):
                self.groupBox_3.show()
                self.groupBox_2.hide()
                if(self.gross_tare_flag == "Gross"):
                    self.radioButton_8.setChecked(True)
                    self.radioButton_7.hide()                    
                else:
                    self.radioButton_7.setChecked(True)
                    self.radioButton_8.hide()
                    
                
                
            else:
                self.groupBox_3.show()
                self.groupBox_2.show()           
        else:            
            self.groupBox_3.hide()
            self.groupBox_2.hide()
    
    def auto_onclick(self):
        self.manual_ins_flg=""
        self.groupBox_3.hide()
        self.groupBox_2.hide()
        '''
        if(self.radioButton.isChecked()):
            self.groupBox_3.hide()
            self.groupBox_2.hide()
        else:
            self.groupBox_3.show()
            self.groupBox_2.show()
        '''   
    def load_default(self):
        connection = sqlite3.connect("fci.db")
        results=connection.execute("SELECT OLD_NEW_SLIP_FLAG, GROSS_TARE_FLAG ,OLD_SLIP_NO,LCD_WEIGHT FROM GLOBAL_VAR") 
        for x in results:
             if(str(x[0]) == "NEW"):
                    self.slip_type="NEW"
                    self.gross_tare_flag=str(x[1])
                    self.current_value=str(x[3])
                    self.lcdNumber.setProperty("value", str(self.current_value))
                    if(str(x[1]) == "GROSS"):
                        self.gross_wt_onclick()                
                    elif(str(x[1]) == "TARE"):
                        self.tare_wt_onclick() 
                    else:
                         print("NONE")                         
             elif(str(x[0]) == "OLD"):
                    self.slip_type="OLD"
                    self.gross_tare_flag=str(x[1])
                    self.current_value=str(x[3])
                    self.lcdNumber.setProperty("value", str(self.current_value))
                    self.lineEdit.setText(str(x[2]))
                    self.fetch_via_search()
                    print("SLip Flag :"+str(x[1]))
                    if(str(x[1]) == "Gross"):
                        self.tare_wt_onclick()               
                    elif(str(x[1]) == "Tare"):
                        self.gross_wt_onclick() 
                    else:
                        print("NONE")
        connection.close()         
            
    def reset_fun(self):
        # First Wt
        self.label_29.setText("--")         
        self.label_30.setText("--")
        self.label_31.setText("--:--")
        self.label_32.setText("0")
        
        #second Wt                      
        self.label_37.setText("--")
        self.label_38.setText("--")        
        self.label_39.setText("--:--")
        self.label_40.setText("0")
        
        #Net Wt
        self.label_45.setText("0")
            
        #self.listWidget_2.clear()
        self.listWidget_3.clear()
        
        #message 
        self.label_59.setText("")
        
        # Vehical No
        self.lineEdit_2.setText("")
        
        #Search line edit
        self.lineEdit.setText("")
        
        #Accpted Wt
        #self.label_50.setText("0")
        
        #Release bag count
        #self.lineEdit_4.setText("")
        #Release wt ton
        #self.lineEdit_5.setText("")
        
        #serial num for search
        #self.lineEdit_5.setText("")
        
        #Avg. bag. Wt
        #self.label_53.setText("50")
        
        #remark
        self.lineEdit_12.setText("")
        #material
        self.lineEdit_11.setText("")
        #Party
        self.lineEdit_10.setText("") 
        
        #Quantity
        #self.lineEdit_6.setText("0")
        
        #Mannual First Wt
        self.lineEdit_8.setText("")
        
        #Mannual Second Wt
        self.lineEdit_9.setText("")
         
        #message
        self.label_59.hide()
        
        
       
        
        
                
        
        
         
        
       
        self.i=0
        connection = sqlite3.connect("fci.db")
        results=connection.execute("select seq+1 from sqlite_sequence WHERE name = 'WEIGHT_MST'") 
        for x in results:            
            self.label_19.setText(str(x[0]).zfill(6))
            #self.lineEdit_2.setText("VEHICLE_"+str(x[0]))
        connection.close()
        
        
        self.load_1st_wt_vehicles()
        
        self.radioButton_4.setChecked(True)
        self.groupBox_3.hide()
        self.groupBox_2.hide()
        self.radioButton.setChecked(True)
        self.current_slip_no ="0"
        self.pushButton_5.setEnabled(True)
        self.status="FIRST"
        self.pushButton_8.setDisabled(True)
        self.pushButton_7_1.setDisabled(True)
        self.comboBox_2_1.setDisabled(True)
        self.load_default()
        
       
         
    
    
    
    '''   
    def start_wt(self):
        #print("Weight Started ....")
        try:
            self.ser = serial.Serial(
                                port='/dev/ttyUSB0',
                                baudrate=9600,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                xonxoff=False,
                                timeout = 0.05
                            )
        
            self.ser.flush()       
            
            self.line = self.ser.readline(15)
            print("o/p:"+str(self.line))
             
            self.timer2.setInterval(5000)        
            self.timer2.timeout.connect(self.display_lcd_val)
            self.timer2.start(1)
            
            
        except IOError:
            print("IO Errors-load cell connections error")
            self.IO_error_flg=1
            
            
    def display_lcd_val(self):               
        #print(" inside display_lcd_val:"+str(self.IO_error_flg))
        if(self.IO_error_flg==0):
            try:
                self.line = self.ser.readline(20)
                print(" raw o/p:"+str(self.line)) 
                if (len(self.line) > 2):
                    
                    self.ser.flush()
                    self.ser.write(b'*D\r')
                    self.xstr3=str(self.line,'utf-8')
                    self.xstr2=self.xstr3[0:6]
                    #print("self.xstr3:"+str(self.xstr3)+" self.xstr2: "+str(self.xstr2))
                    try:
                         self.xstr4=int(self.xstr2)
                    except ValueError:                        
                        print("Value Error"+str(self.xstr2))
                        self.xstr4=0                    
                    try:
                        self.current_value=float(int(self.xstr4)/1000)
                    except ValueError:
                        print("Value Error :"+str(self.xstr4))
                        self.xstr4=0
                        self.current_value=0                    
                    self.lcdNumber.setProperty("value", str(self.xstr4))                    
                    
            except IOError:
                print("IO Errors : Data Read Error") 
                self.IO_error_flg=1  
              
    '''       
            
        
    def gross_wt_onclick(self):
        #print("self.current_slip_no: "+strself.current_slip_no))
        
        if(str(self.current_slip_no) == "0"):
               self.label_29.setText("Gross")         
               self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
               self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_32.setText(str(self.current_value))
               #self.label_32.setText(str("200"))
               
        else:     
               self.label_37.setText("Gross")
               self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))               
               self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_40.setText(str(self.current_value))
               #self.label_40.setText(str("200"))
                       
        self.net_wt_calc()
        
        
                   
    def tare_wt_onclick(self):
        
        
        if(str(self.current_slip_no) == "0"):
               self.label_29.setText("Tare")         
               self.label_30.setText(datetime.datetime.now().strftime("%Y-%m-%d"))
               self.label_31.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_32.setText(str(self.current_value))
               #self.label_32.setText(str("80"))
               
        else:     
               self.label_37.setText("Tare")
               self.label_38.setText(datetime.datetime.now().strftime("%Y-%m-%d"))               
               self.label_39.setText(datetime.datetime.now().strftime("%H:%M"))
               self.label_40.setText(str(self.current_value))
               #self.label_40.setText(str("80"))
                       
        self.net_wt_calc()
     
    def net_wt_calc(self):        
        print(" self.label_32.text : "+str(self.label_32.text()))
        print(" self.label_40.text : "+str(self.label_40.text()))
        self.first_wt=str(self.label_32.text())
        self.second_wt=str(self.label_40.text())
        if(float(self.first_wt) > 0 and float(self.second_wt) > 0):            
                if(float(self.first_wt) >= float(self.second_wt)):            
                      self.net_wt=int(float(self.first_wt)-float(self.second_wt))             
                      self.label_45.setText(str(self.net_wt))
                else:
                      self.net_wt=int(float(self.second_wt)-float(self.first_wt))             
                      self.label_45.setText(str(self.net_wt))
                accepted_bags=float(self.net_wt)/50
                #self.lineEdit_4.setText(str(round(accepted_bags)))
                #self.lineEdit_5.setText('{:06.3f}'.format(self.net_wt))
                #self.lineEdit_13.setText("")
                #self.lineEdit_10.setText('{:06.3f}'.format(self.net_wt))
               
                      
    def load_1st_wt_vehicles(self):
        self.listWidget_3.clear()
        connection = sqlite3.connect("fci.db")
        print("SELECT VEHICLE_NO||' - ('||printf(\"%04d\", SERIAL_ID)||')' AS SERIAL_ID FROM WEIGHT_MST WHERE STATUS='FIRST' and issue_id='"+str(self.issue_id)+"'")       
        
        results=connection.execute("SELECT VEHICLE_NO||' - ('||printf(\"%04d\", SERIAL_ID)||')' AS SERIAL_ID FROM WEIGHT_MST WHERE STATUS='FIRST' and issue_id='"+str(self.issue_id)+"'")       
        for x in results:
               item= QtWidgets.QListWidgetItem(str(x[0]))
               item.setBackground(QtGui.QColor("light blue"))
               self.listWidget_3.addItem(item)
               #self.listWidget_3.addItem(str(x[0]))
        connection.close()
        
   
        
    def print_recipt(self):
        self.serial_id=int(self.label_19.text())
        print("Slip Id : "+str(str(self.serial_id)))
        self.pushButton_8.setDisabled(True)
        connection = sqlite3.connect("fci.db")          
        with connection:        
             cursor = connection.cursor()                    
             cursor.execute("UPDATE PRINTER_DATA SET SERIAL_ID='"+str(self.serial_id)+"',DUPLICATE_FLG='No'") 
        connection.commit();
        connection.close()  
        
        
        y=0
        y=(int(self.comboBox_2_1.currentText()))
        print("y:"+str(y))
        for x in range(y):
                         print("print count :"+str(x))
                         os.system("./job_print_others.sh")
        connection.close()
        
    
    def fetch_via_search(self):
        if(str(self.lineEdit.text()) != ""):
                self.label_59.hide()
                self.current_slip_no=str(self.lineEdit.text())
                print("Slip No :"+str(self.current_slip_no))        
                self.fetch_slip_data()
                print(" self.save_diable :"+str(self.save_diable))
                if(str(self.save_diable) == "1"):
                    self.pushButton_5.setDisabled(True)
                    self.net_wt_calc()
                else:
                    self.pushButton_5.setEnabled(True)
                    
        else:
                self.label_59.setText("Slip No. is empty.")
                self.label_59.show()
                
    def fetch_via_first_wt_vehical_list(self):
        #self.reset_fun()
        v_str=str(self.listWidget_3.currentItem().text())
        self.re_str = str(v_str)                
        self.current_slip_no= re.search('\(([^)]+)', self.re_str).group(1)
        
        print("self.current_slip_no:"+str(self.current_slip_no))
        self.fetch_slip_data()
        self.pushButton_5.setEnabled(True)
    
    
    
    def fetch_slip_data(self):        
        self.vehicle_no=""
        
        connection = sqlite3.connect("fci.db")
        
        results=connection.execute("SELECT SERIAL_ID, MATERIAL_NAME,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON ,VEHICLE_NO,IFNULL(SECOND_WT_MODE,'--'),IFNULL(SECOND_WT_VAL,0),IFNULL(SECOND_WT_CREATED_ON,'--'),STATUS,IFNULL(AVG_BAG_WT,'0') ,DRIVER_IN_OUT,IFNULL(ACCPTED_BAGS,'0'),TARGET_STORAGE,CURR_TRUCK_CNT,TOTAL_TRUCKS_CNT,CONTRACTOR_ID,CONTRACTOR_NAME,IFNULL(ACCPTED_BAGS,'0'),BATCH_ID,TARGET_STORAGE,IFNULL(SLOT_1,'0'),IFNULL(SLOT_1_QUANTITY,'0'),IFNULL(SLOT_2,'0'),IFNULL(SLOT_2_QUANTITY,'0'), PARTY_NAME,REMARK FROM WEIGHT_MST WHERE SERIAL_ID='"+self.current_slip_no+"'")       
        for x in results:        
            #self.label_.setText(str(x[0]).zfill(4))
            self.label_19.setText(str(x[0]).zfill(6))
            self.current_slip_no=str(x[0])
             # First Wt
            self.label_29.setText(str(x[2]))         
            self.label_30.setText(str(x[4])[0:11])
            self.label_31.setText(str(x[4])[11:16])
            self.label_32.setText(str(x[3]))
         
            # Vehical No
            self.lineEdit_2.setText(str(x[5]))
           
            #second Wt                      
            self.label_37.setText(str(x[6]))
            self.label_38.setText(str(x[8])[0:11])
            if(str(x[8]) == "--"):
                   self.label_39.setText("--:--")
            else:
                   self.label_39.setText(str(x[8])[11:16])
            self.label_40.setText(str(x[7]))
            
            #Net Wt
            self.label_45.setText("0")
                
            
            self.pushButton_8.setEnabled(True)
            self.pushButton_7_1.setEnabled(True)
            self.comboBox_2_1.setEnabled(True)
            if(str(x[11]) == "OUT"):
                self.radioButton_4.setChecked(True)
                self.radioButton_3.setChecked(False)
                
            else:
               self.radioButton_3.setChecked(True)
               self.radioButton_4.setChecked(False)
               
             
            
            #Accpted Bags
            #self.lineEdit_4.setText(str(x[12]))
            #Avg.Bag.Wt
            #self.lineEdit_5.setText(str(x[10]))
            
            #Proposed Bag count
            #self.lineEdit_5.setText(str(x[12]))
            
            #Avg. bag. Wt
            #self.label_53.setText("50")
            #current truc count
            #self.label_24.setText(str(x[14]).zfill(3))
            #Total Truck count
            #self.label_48.setText(str(x[15]))
            
            #batch id
            #self.comboBox.setCurrentText(str(x[19]).zfill(6))
            
            #message
            self.label_59.hide()
            
            #Target Storage
            #self.comboBox_2.setCurrentText(str(x[20]))
            print("FIRST_SECOND :"+str(x[9]))
            print("21 :"+str(x[21]))
            print("23:"+str(x[23]))
            print("26:"+str(x[26]))
            print("1:"+str(x[1]))
            print("25:"+str(x[25]))
            self.lineEdit_10.setText(str(x[25]))
            self.lineEdit_11.setText(str(x[1]))
            self.lineEdit_12.setText(str(x[26]))
            
            self.status="SECOND"
            self.save_diable=0
            if(str(x[9]) == "SECOND"):
                  self.save_diable=1
            else:
                  self.save_diable=0
        
        
     
    def save_data(self):        
        self.vehicle_no=str(self.lineEdit_2.text())        
        if(len(self.vehicle_no) >= 4):            
            #self.materail_name=str(self.comboBox_2.currentText())
            self.materail_name=self.lineEdit_11.text()
            self.party=self.lineEdit_10.text()
            self.remark=self.lineEdit_12.text()
            
            self.first_wt_mode=self.label_29.text()
            self.first_wt_val=self.label_32.text()            
            #self.second_wt_mode=self.label_37.text()
            #self.second_wt_val=self.label_39.text()
            if(self.radioButton_2.isChecked()):                
                    self.weight_type="MANUAL"
            else :
                    self.weight_type="AUTO"
                    
            #self.accepted_bags=self.lineEdit_4.text()
                    
           
            self.driver_in_out="OUT"
            
            if(self.radioButton_4.isChecked()):                
                    self.driver_in_out="OUT"
            else :
                    self.driver_in_out="IN"
            
            #self.proposed_bags=999
            #self.update_slot(str(self.slot_no),str(self.issue_id),str(self.materail_name),str(self.quantity),str(self.net_wt_val))
            
            self.net_wt_val=self.label_45.text()  
            
            #self.target_storage=self.comboBox_2.currentText()
            
            
            self.device_location_type="STORAGE"
           
            connection = sqlite3.connect("fci.db")
            results=connection.execute("SELECT DEVICE_ID FROM GLOBAL_VAR")       
            for x in results:
                   self.device_id=str(x[0])
            connection.close()
            
            #self.current_slip_no="0"     
            if(str(self.current_slip_no)=="0"):
               connection = sqlite3.connect("fci.db")
               results=connection.execute("SELECT max(SERIAL_ID)+1 FROM WEIGHT_MST")       
               for x in results:
                   self.current_slip_no=str(x[0])
               connection.close()    
            else:
                self.current_slip_no=str(self.label_19.text())
                
            self.batch_id=""
            self.issue_id=""
            
            if(len(self.vehicle_no) >= 4):
                 #if(int(self.proposed_bags) > 0):
                     # if(str(self.issue_id) != ""):
                             if(self.status=="FIRST"):                         
                                 if(float(self.first_wt_val) > 0 ): 
                                             ### insert  Statements
                                             connection = sqlite3.connect("fci.db")
                                             with connection:                            
                                                        cursor = connection.cursor()       
                                                        print(" First Wt Date :"+str(self.label_30.text())+" First  Wt Time:"+str(self.label_31.text()))
                                                        cr_date_str=str(self.label_30.text()+" "+str(self.label_31.text())+":00")
                                                        #print("cr_date_str:"+str(cr_date_str))
                                                        cr_date= datetime.datetime.strptime(cr_date_str, '%Y-%m-%d %H:%M:%S')
                                                        
                                                        cursor.execute("INSERT INTO WEIGHT_MST(VEHICLE_NO,MATERIAL_NAME,BATCH_ID,STATUS,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON,"
                                                            +"DRIVER_IN_OUT,REMARK,TOTAL_TRUCKS_CNT,DEVICE_LOCATION_TYPE,DEVICE_ID,CREATED_BY,MANNUAL_INS_FLG,ISSUE_ID,PARTY_NAME,UPLOAD_STATUS,BATCH_ISSUE_FLG)"
                                                                       +"VALUES ('"+self.vehicle_no+"','"+self.materail_name+"','"+self.batch_id+"','"+self.status+"','"+self.first_wt_mode+"','"+self.first_wt_val+"','"+str(cr_date)+"','"+str(self.driver_in_out)+"','"+str(self.remark)+"','"+str(self.total_truck_cnt)+"','"+str(self.device_location_type)+"','"+str(self.device_id)+"','"+str(self.login_user_id)+"','"+str(self.manual_ins_flg)+"','"+str(self.issue_id)+"','"+str(self.party)+"','NOT_TO_UPLOAD','OTHER')")
                                                                      
                                             #self.reset_fun()
                                             self.label_59.setText("Successfully Saved First Weight.")
                                             #self.log_audit("Weighing"," Loaded First Weight. slip No:"+str(int(self.label_19.text())))
                                             self.label_59.show()  
                                             connection.commit();
                                             connection.close()
                                             print("Data Inserted !!!!")
                                             self.load_1st_wt_vehicles()
                                             #self.load_2nd_wt_vehicles()
                                             self.pushButton_5.setDisabled(True)
                                             self.pushButton_8.setEnabled(True)
                                             self.pushButton_7_1.setEnabled(True)
                                             self.comboBox_2_1.setEnabled(True)
                                 else:
                                             self.label_59.setText("First Weight. should not be zero")
                                             self.label_59.show() 
                             elif(self.status=="SECOND"):
                                 self.second_wt_mode=self.label_37.text()
                                 self.second_wt_val=self.label_40.text()
                                 self.net_wt_val=self.label_45.text()
                                 
                                 if(self.label_29.text() != self.label_37.text()):
                                     if(float(self.label_45.text()) > 0 ):
                                         self.validation()
                                         if(str(self.goAhead) == 'Yes'):                                         
                                                 first_wt_date_str=str(self.label_30.text()+" "+str(self.label_31.text())+":00")                                 
                                                 first_wt_date= datetime.datetime.strptime(first_wt_date_str, '%Y-%m-%d %H:%M:%S')
                                                 
                                                 second_wt_date_str=str(self.label_38.text()+" "+str(self.label_39.text())+":00")                                 
                                                 second_wt_date= datetime.datetime.strptime(second_wt_date_str, '%Y-%m-%d %H:%M:%S')
                                                 
                                                 connection = sqlite3.connect("fci.db")
                                                 results=connection.execute("SELECT count(*) FROM WEIGHT_MST WHERE SERIAL_ID = '"+str(int(self.label_19.text()))+"' ")       
                                                 for x in results:
                                                           self.exist_flag=str(x[0])
                                                 connection.close()
                                                 print("SELECT count(*) FROM WEIGHT_MST WHERE SERIAL_ID = '"+str(self.current_slip_no)+"' ")
                                                 print("exist flg :"+str(self.exist_flag))
                                                 if(self.exist_flag == '1'):
                                                     print("exist flg :inside update")
                                                     connection = sqlite3.connect("fci.db")
                                                     with connection:                            
                                                            cursor = connection.cursor()
                                                           
                                                            cursor.execute("UPDATE WEIGHT_MST SET STATUS='SECOND',SECOND_WT_MODE='"+str(self.second_wt_mode)+"',SECOND_WT_VAL='"+str(self.second_wt_val)+"',SECOND_WT_CREATED_ON='"+str(second_wt_date)+"',NET_WEIGHT_VAL='"+str(self.net_wt_val)+"',DRIVER_IN_OUT='"+self.driver_in_out+"',DEVICE_ID='"+str(self.device_id)+"' ,ACCPTED_BAGS='"+str(self.accepted_bags)+"', UPLOAD_STATUS='NOT_TO_UPLOAD', UPDATED_BY='"+str(self.login_user_id)+"',UPDATED_ON=current_timestamp,MANNUAL_INS_FLG='"+str(self.manual_ins_flg)+"', ISSUE_ID='"+str(self.issue_id)+"', SLOT_1='"+str(self.slot_no)+"',SLOT_1_QUANTITY='"+str(self.quantity)+"',SLOT_2='"+str(self.slot_no2)+"',SLOT_2_QUANTITY='"+str(self.quantity2)+"',AVG_BAG_WT='"+str(self.avg_bag_wt)+"'   WHERE SERIAL_ID='"+str(int(self.label_19.text()))+"'");
                                                     connection.commit();
                                                     connection.close()
                                                     
                                                 else:
                                                     print("exist flg :inside insert")
                                                     connection = sqlite3.connect("fci.db")
                                                     with connection:                            
                                                            cursor = connection.cursor()                                                    
                                                              
                                                            cursor.execute("INSERT INTO WEIGHT_MST(VEHICLE_NO,MATERIAL_NAME,BATCH_ID,STATUS,FIRST_WEIGHT_MODE,FIRST_WEIGHT_VAL,FIRST_WT_CRTEATED_ON,"
                                                                   +"DRIVER_IN_OUT,CURR_TRUCK_CNT,TOTAL_TRUCKS_CNT,DEVICE_LOCATION_TYPE,SECOND_WT_MODE,SECOND_WT_VAL,SECOND_WT_CREATED_ON,NET_WEIGHT_VAL,DEVICE_ID,ACCPTED_BAGS,CREATED_BY,MANNUAL_INS_FLG,ISSUE_ID,SLOT_1,SLOT_1_QUANTITY,SLOT_2,SLOT_2_QUANTITY,AVG_BAG_WT,PARTY_NAME,REMARK,UPLOAD_STATUS)"
                                                                   +"VALUES ('"+self.vehicle_no+"','"+self.materail_name+"','"+self.batch_id+"','"+self.status+"','"+self.first_wt_mode+"','"+self.first_wt_val+"','"+str(first_wt_date)
                                                                           +"','"+str(self.driver_in_out)+"','"+str(self.curr_truck_cnt)+"','"+str(self.total_truck_cnt)
                                                                           +"','"+str(self.device_location_type)+"','"+str(self.second_wt_mode)+"','"+self.second_wt_val+"','"+str(second_wt_date)+"','"+str(self.net_wt_val)+"','"+str(self.device_id)+"','"+str(self.accepted_bags)+"','"+str(self.login_user_id)+"','"+str(self.manual_ins_flg)+"','"+str(self.issue_id)+"','"+str(self.slot_no)+"','"+str(self.quantity)+"','"+str(self.slot_no2)+"','"+str(self.quantity2)+"','"+str(self.avg_bag_wt)+"','"+str(self.party)+"','"+str(self.remark)+"','NOT_TO_UPLOAD')")
                                                     connection.commit();
                                                     connection.close()
                                                 
                                                  
                                                      
                                                 #self.reset_fun()
                                                 self.label_59.setText("Successfully Saved Second Weight.")
                                                 #self.log_audit("Weighing","Loaded Second Weight. slip No:"+str(int(self.label_19.text())))
                                                 self.label_59.show()
                                                 self.load_1st_wt_vehicles()
                                                 #self.load_2nd_wt_vehicles()
                                                 self.pushButton_5.setDisabled(True)
                                                 self.pushButton_8.setEnabled(True)
                                                 self.pushButton_7_1.setEnabled(True)
                                                 self.comboBox_2_1.setEnabled(True)
                                                 
                                         
                                     else:
                                         self.label_59.setText("Error:Net Wt Should Not Zero.")
                                         self.label_59.show()
                                     
                                 else:
                                         self.label_59.setText("Error:Both Weights are of same Type.")
                                         self.label_59.show()
                                 
                                 
                                 
                                ### Update Statement
                                 
                                 
                                 
                                 
                         
                             else:
                                 self.label_59.setText("Weight FIRST /SECOND ?.")
                                 self.label_59.show()
                      #else:
                      #       self.label_59.setText("Issue Id Should Not Empty.")
                       #      self.label_59.show()
                     
                 #else:
                 #    self.label_59.setText("Proposed Bags should not  empty Or zero.")
                  #   self.label_59.show()
                         
                 
        else:
                 self.label_59.setText("Vehical Number is empty.")
                 self.label_59.show()
    
    def validation(self):
        self.goAhead="Yes"
        '''
        if(str(self.slot_no) == ""):
                 self.label_59.setText("SLot Id Should Not Be Empty.")
                 self.label_59.show()
        elif(self.avg_bag_wt > "51.5"):
                 self.label_59.setText("Please Check the Bags Count (Upper Limit Crossed).")
                 self.label_59.show()
        elif(self.avg_bag_wt < "45"):
                  self.label_59.setText("Please Check the Bags Count (Lower Limit Crossed).")
                  self.label_59.show()    
        elif(self.lineEdit_13.text()== ""):
                  self.label_59.setText("Quantity 1 is empty.")
                  self.label_59.show()
        else:
                 if(self.checkBox.isChecked()):
                        self.goAhead="No"
                        if(str(self.slot_no2) == ""):
                                 self.label_59.setText("SLot Id 2 Should Not Be Empty.")
                                 self.label_59.show()
                        elif(str(self.slot_no2) == str(self.slot_no)):
                                 self.label_59.setText("Both Slots Should Not Be Same.")
                                 self.label_59.show()  
                        elif(self.lineEdit_11.text()== ""):
                                  self.label_59.setText("Quantity 2 is empty.")
                                  self.label_59.show()
                        else:
                                  self.goAhead="Yes"
                 
                 else:
                         self.goAhead="Yes"
    
      '''
   
    def open_pdf(self):
        self.create_pdf()
        os.system("xpdf ./reports/recipt_site.pdf")
        
    def create_pdf(self):
        self.tare_wt=""
        self.tare_wt_date=""
        self.gross_wt=""
        self.gross_wt_date=""
        self.net_wt=""        
        self.title=""
        self.address=""
        self.company_name_font=16
        self.company_address_font=12
        self.note=""
       
        
        
        connection = sqlite3.connect("fci.db")          
        with connection:        
             cursor = connection.cursor()                    
             cursor.execute("UPDATE PRINTER_DATA SET SERIAL_ID='"+str(self.current_slip_no)+"',DUPLICATE_FLG='No'") 
        connection.commit();
        connection.close()   
        
        data= [['           Weight Type         ','          Date           ','        Weight (Kg)          ']]
        
        connection = sqlite3.connect("fci.db")       
        print("SELECT IFNULL(TARE_WT_VAL,0),TARE_WT_DATE,IFNULL(GROSS_WT_VAL,0),GROSS_WT_DATE,NET_WEIGHT_VAL FROM WEIGHT_MST_FCI_VW  WHERE SERIAL_ID in (SELECT SERIAL_ID from PRINTER_DATA)") 
               
        
        results=connection.execute("SELECT printf(\"%6d\", IFNULL(TARE_WT_VAL,0)) ,TARE_WT_DATE,printf(\"%6d\", IFNULL(GROSS_WT_VAL,0)) ,GROSS_WT_DATE,printf(\"%6d\", IFNULL(NET_WEIGHT_VAL,0)) FROM WEIGHT_MST_FCI_VW  WHERE SERIAL_ID in (SELECT SERIAL_ID from PRINTER_DATA)") 
               
        for x in results:
            self.tare_wt=str(x[0])
            self.tare_wt_date=str(x[1])
            self.gross_wt=str(x[2])
            self.gross_wt_date=str(x[3])
            self.net_wt=str(x[4])
        connection.close()
        
        data.append(["Tare Weight",str(self.tare_wt_date),"     "+str(self.tare_wt)])
        data.append(["Gross Weight",str(self.gross_wt_date),"     "+str(self.gross_wt)]) 
        data.append(["Net Weight","","     "+str(self.net_wt)])
        
        
        
        c = Canvas("./reports/recipt_site.pdf")
        #c.setPageSize( landscape(letter) )
        #############################
        c.setFont('Helvetica-Bold', int(self.company_name_font) )
        PAGE_HEIGHT = letter[1]
        PAGE_WIDTH = letter[0]
        
        
            
        connection = sqlite3.connect("fci.db")       
        results=connection.execute("SELECT  PRINTER_HEATER_TITLE,PRINTER_HEADER,PRINTER_FOOTER FROM GLOBAL_VAR") 
        for x in results:
                   c.drawString(170,790,str(x[0]))             
                   self.address=str(x[1])
                   self.note=str(x[2])
        connection.close()
        
        
        
        c.setFont('Helvetica-Bold', int(self.company_address_font) )
        c.drawString(100,770,str(self.address))
        #c.drawString(150,770,str(self.address[76:200]))
        
        c.line( 0.5*inch, PAGE_HEIGHT-( 0.45*inch ), PAGE_WIDTH-( 0.5*inch ), PAGE_HEIGHT-( 0.45*inch ) )
        ###################################################
        connection = sqlite3.connect("fci.db")       
        results=connection.execute("SELECT SERIAL_ID,VEHICLE_NO,BATCH_ID,ACCPTED_BAGS,MATERIAL_NAME,PARTY_NAME FROM WEIGHT_MST_FCI_VW  WHERE SERIAL_ID in (SELECT SERIAL_ID from PRINTER_DATA)") 
                
        for x in results:
                c.setFont('Helvetica',10)
                c.drawString(50,740,"Serial No        : "+str(x[0]))
                c.drawString(250,740,"Vehicle No      : "+str(x[1]))
                
                c.drawString(50,710,"Party Name.       : "+str(x[5]))
                
                c.drawString(50,650,"Material         : "+str(x[4]))
                
                
               
                
                c.drawString(50,440,str(self.note))
                #c.drawString(250,550,"Net Wt. (Kg)    : "+str(x[11]))
                #c.drawString(250,530,"Total Amount(Rs): "+str(x[8]))
                c.line(0.5*inch,420,580,420)
        
        connection.close()
  
        ##############################################
        c.setFont('Helvetica',10)        
        f = Table(data)        
        f.setStyle(TableStyle([("BOX", (0, 0), (-1, -1), 0.20, colors.black),('INNERGRID', (0, 0), (-1, -1), 0.50, colors.black), ('FONT', (0, 0), (-1, -1), "Helvetica", 10)]))
        width = 200
        height_1 = 400
        f.wrapOn(c, width, height_1)
        x = 40
        y = 560
        f.drawOn(c, x, y)        
        ############################################
        
        c.showPage()
        c.save()  


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = fci_34_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
