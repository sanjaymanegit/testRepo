# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TY_17_START_TEST_TENSILE_8.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os

from print_test_popup import P_POP_TEST_Ui_MainWindow
from email_popup_test_report import popup_email_test_Ui_MainWindow
from comment_popup import comment_Ui_MainWindow


from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QVBoxLayout, QSizePolicy, QMessageBox, QWidget, QPushButton
from PyQt5.QtGui import QIcon
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
import random
import serial,time
import array  as arr
import numpy as np

import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import QTableWidgetItem
import sqlite3
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator
import datetime

from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, BaseDocTemplate, Frame, Paragraph, NextPageTemplate, PageBreak, PageTemplate
from reportlab.pdfgen.canvas import Canvas
import pandas as pd
from pylab import title, figure, xlabel, ylabel, xticks, bar, legend, axis, savefig
from reportlab.rl_settings import showBoundary

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY 
from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet,ParagraphStyle
from reportlab.rl_config import defaultPageSize
from reportlab.lib.units import inch
from reportlab.lib.pagesizes import portrait,landscape, letter,inch,A4
from reportlab.lib import colors
from reportlab.graphics.shapes import Line, Drawing




class TY_20_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1368, 768)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 1341, 711))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        self.frame.setFont(font)
        self.frame.setStyleSheet("color: rgb(0, 0, 0);\n"
"")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        self.frame.setObjectName("frame")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(1020, 20, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(0, 450, 571, 20))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(0)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(0, 50, 1341, 20))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(3)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(0, 100, 571, 20))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(0)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.frame)
        self.line_4.setGeometry(QtCore.QRect(0, 160, 571, 20))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(0)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.frame)
        self.line_5.setGeometry(QtCore.QRect(0, 220, 571, 20))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setLineWidth(0)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.frame)
        self.line_6.setGeometry(QtCore.QRect(0, 270, 571, 20))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setLineWidth(0)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setObjectName("line_6")
        self.line_7 = QtWidgets.QFrame(self.frame)
        self.line_7.setGeometry(QtCore.QRect(0, 330, 571, 20))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setLineWidth(0)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setObjectName("line_7")
        self.line_8 = QtWidgets.QFrame(self.frame)
        self.line_8.setGeometry(QtCore.QRect(0, 390, 571, 20))
        self.line_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_8.setLineWidth(0)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setObjectName("line_8")
        self.line_9 = QtWidgets.QFrame(self.frame)
        self.line_9.setGeometry(QtCore.QRect(253, 60, 20, 651))
        self.line_9.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_9.setLineWidth(3)
        self.line_9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(self.frame)
        self.line_10.setGeometry(QtCore.QRect(560, 60, 20, 651))
        self.line_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_10.setLineWidth(3)
        self.line_10.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_10.setObjectName("line_10")
        self.label_11 = QtWidgets.QLabel(self.frame)
        self.label_11.setGeometry(QtCore.QRect(20, 10, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.frame)
        self.label_12.setGeometry(QtCore.QRect(100, 10, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setGeometry(QtCore.QRect(70, 70, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame)
        self.label_10.setGeometry(QtCore.QRect(60, 130, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit)
        self.lineEdit.setValidator(input_validator)
        self.lineEdit.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit.setGeometry(QtCore.QRect(300, 70, 81, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_2)
        self.lineEdit_2.setValidator(input_validator)
        self.lineEdit_2.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_2.setGeometry(QtCore.QRect(450, 70, 81, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_8 = QtWidgets.QLabel(self.frame)
        self.label_8.setGeometry(QtCore.QRect(410, 80, 21, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_3)
        self.lineEdit_3.setValidator(input_validator)
        self.lineEdit_3.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_3.setGeometry(QtCore.QRect(300, 130, 81, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_13 = QtWidgets.QLabel(self.frame)
        self.label_13.setGeometry(QtCore.QRect(60, 190, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_13.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_13.setObjectName("label_13")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_4)
        self.lineEdit_4.setValidator(input_validator)
        self.lineEdit_4.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_4.setGeometry(QtCore.QRect(300, 190, 81, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_14 = QtWidgets.QLabel(self.frame)
        self.label_14.setGeometry(QtCore.QRect(50, 240, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_14.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.frame)
        self.label_15.setGeometry(QtCore.QRect(300, 240, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_15.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.frame)
        self.label_16.setGeometry(QtCore.QRect(40, 300, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_16.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.frame)
        self.label_17.setGeometry(QtCore.QRect(300, 300, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_17.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        self.label_24 = QtWidgets.QLabel(self.frame)
        self.label_24.setGeometry(QtCore.QRect(50, 660, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_24.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.frame)
        self.label_25.setGeometry(QtCore.QRect(360, 660, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_25.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.label_28 = QtWidgets.QLabel(self.frame)
        self.label_28.setGeometry(QtCore.QRect(410, 600, 21, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_28.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_7)
        self.lineEdit_7.setValidator(input_validator)
        self.lineEdit_7.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_7.setGeometry(QtCore.QRect(450, 590, 101, 41))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_30 = QtWidgets.QLabel(self.frame)
        self.label_30.setGeometry(QtCore.QRect(280, 660, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_30.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.label_32 = QtWidgets.QLabel(self.frame)
        self.label_32.setGeometry(QtCore.QRect(490, 660, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_32.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.label_31 = QtWidgets.QLabel(self.frame)
        self.label_31.setGeometry(QtCore.QRect(160, 10, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_31.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.line_12 = QtWidgets.QFrame(self.frame)
        self.line_12.setGeometry(QtCore.QRect(0, 510, 571, 20))
        self.line_12.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_12.setLineWidth(0)
        self.line_12.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_12.setObjectName("line_12")
        self.line_13 = QtWidgets.QFrame(self.frame)
        self.line_13.setGeometry(QtCore.QRect(0, 570, 571, 20))
        self.line_13.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_13.setLineWidth(0)
        self.line_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_13.setObjectName("line_13")
        self.line_14 = QtWidgets.QFrame(self.frame)
        self.line_14.setGeometry(QtCore.QRect(0, 630, 571, 20))
        self.line_14.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_14.setLineWidth(0)
        self.line_14.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_14.setObjectName("line_14")
        self.label_33 = QtWidgets.QLabel(self.frame)
        self.label_33.setGeometry(QtCore.QRect(50, 360, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_33.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLineEdit(self.frame)
        self.label_34.setGeometry(QtCore.QRect(290, 350, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_34.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.label_26 = QtWidgets.QLabel(self.frame)
        self.label_26.setGeometry(QtCore.QRect(50, 420, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_26.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.frame)
        self.label_27.setGeometry(QtCore.QRect(290, 420, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_27.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.label_21 = QtWidgets.QLabel(self.frame)
        self.label_21.setGeometry(QtCore.QRect(50, 480, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_21.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_5)
        self.lineEdit_5.setValidator(input_validator)
        self.lineEdit_5.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_5.setGeometry(QtCore.QRect(290, 470, 101, 41))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_22 = QtWidgets.QLabel(self.frame)
        self.label_22.setGeometry(QtCore.QRect(50, 540, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_22.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.label_29 = QtWidgets.QLabel(self.frame)
        self.label_29.setGeometry(QtCore.QRect(290, 530, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_29.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_29.setObjectName("label_29")
        self.label_23 = QtWidgets.QLabel(self.frame)
        self.label_23.setGeometry(QtCore.QRect(50, 590, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_23.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.frame)
        reg_ex = QRegExp("(\\d+\\.\\d+)")
        input_validator = QRegExpValidator(reg_ex, self.lineEdit_6)
        self.lineEdit_6.setValidator(input_validator)
        self.lineEdit_6.setStyleSheet("color: rgb(170, 0, 127);")
        self.lineEdit_6.setGeometry(QtCore.QRect(280, 590, 101, 41))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.frame)
        self.lcdNumber.setGeometry(QtCore.QRect(1110, 670, 81, 31))
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);")
        self.lcdNumber.setSmallDecimalPoint(True)
        self.lcdNumber.setProperty("value", 100.0)
        self.lcdNumber.setProperty("intValue", 100)
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_18 = QtWidgets.QLabel(self.frame)
        self.label_18.setGeometry(QtCore.QRect(1110, 630, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_18.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_18.setObjectName("label_18")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.frame)
        self.lcdNumber_2.setGeometry(QtCore.QRect(990, 670, 71, 31))
        self.lcdNumber_2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);")
        self.lcdNumber_2.setProperty("intValue", 100)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.label_19 = QtWidgets.QLabel(self.frame)
        self.label_19.setGeometry(QtCore.QRect(990, 630, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_19.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(590, 670, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(590, 630, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 180, 0);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_13 = QtWidgets.QPushButton(self.frame)
        self.pushButton_13.setGeometry(QtCore.QRect(700, 630, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setStyleSheet("background-color: rgb(90, 90, 134);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.frame)
        self.pushButton_14.setGeometry(QtCore.QRect(870, 670, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("background-color: rgb(90, 90, 134);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.frame)
        self.pushButton_15.setGeometry(QtCore.QRect(700, 670, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("background-color: rgb(90, 90, 134);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.frame)
        self.pushButton_16.setGeometry(QtCore.QRect(870, 630, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("background-color: rgb(90, 90, 134);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_16.setObjectName("pushButton_16")
        self.layoutWidget = QtWidgets.QWidget(self.frame)
        self.layoutWidget.setGeometry(QtCore.QRect(580, 80, 741, 541))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_35 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("color: rgb(170, 0, 127);")
        self.label_35.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_35.setObjectName("label_35")
        self.gridLayout.addWidget(self.label_35, 0, 0, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(self.layoutWidget)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 1, 0, 1, 1)
        self.label_36 = QtWidgets.QLabel(self.frame)
        self.label_36.setGeometry(QtCore.QRect(540, 10, 341, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_36.setAlignment(QtCore.Qt.AlignCenter)
        self.label_36.setObjectName("label_36")
        self.pushButton_17 = QtWidgets.QPushButton(self.frame)
        self.pushButton_17.setGeometry(QtCore.QRect(1220, 650, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setStyleSheet("background-color: rgb(90, 90, 134);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_17.setObjectName("pushButton_17")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1368, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.goAhead="Yes"
        self.test_id_exist="No"
        self.timer3=QtCore.QTimer()
        self.sc_blank=""
        self.yeild_strength=""

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_20.setText(_translate("MainWindow", datetime.datetime.now().strftime("%B  %d , %Y %I:%M ")+""))
        self.label_11.setText(_translate("MainWindow", "TEST ID :"))
        self.label_12.setText(_translate("MainWindow", "001"))
        self.label_9.setText(_translate("MainWindow", "Initial Size (mm)"))
        self.label_10.setText(_translate("MainWindow", "Initial Area (mm2)"))
        self.label_8.setText(_translate("MainWindow", "*"))
        self.label_13.setText(_translate("MainWindow", "Gauge Length (mm)"))
        self.label_14.setText(_translate("MainWindow", "Tensile Strength (Mpa)"))
        self.label_15.setText(_translate("MainWindow", "0.00"))
        self.label_16.setText(_translate("MainWindow", "Yeild Strength (Mpa)"))
        self.label_17.setText(_translate("MainWindow", "0.00"))
        self.label_24.setText(_translate("MainWindow", "Final Area (mm²)"))
        self.label_25.setText(_translate("MainWindow", "Reduction Area % :"))
        self.label_28.setText(_translate("MainWindow", "*"))
        self.label_30.setText(_translate("MainWindow", "12.47"))
        self.label_32.setText(_translate("MainWindow", "53.14"))
        self.label_31.setText(_translate("MainWindow", "(Rectangle)"))
        self.label_33.setText(_translate("MainWindow", "Sepc. Details"))
        self.label_34.setText(_translate("MainWindow", ""))
        self.label_26.setText(_translate("MainWindow", "Sepc. ID"))
        self.label_27.setText(_translate("MainWindow", "D00232"))
        self.label_21.setText(_translate("MainWindow", "Final Length (mm)"))
        self.label_22.setText(_translate("MainWindow", "Elongation %"))
        self.label_29.setText(_translate("MainWindow", "25"))
        self.label_23.setText(_translate("MainWindow", "Final Size (mm)"))
        self.label_18.setText(_translate("MainWindow", "Stress (MPa) :"))
        self.label_18.hide()
        self.label_19.setText(_translate("MainWindow", "Strain (%) :"))
        self.label_19.hide()
        self.pushButton_3.setText(_translate("MainWindow", "E-Mail"))
       
        self.pushButton_4.setText(_translate("MainWindow", "Refresh"))
        self.pushButton_13.setText(_translate("MainWindow", "View Report"))
      
        self.pushButton_14.setText(_translate("MainWindow", "Save"))
        
        self.pushButton_15.setText(_translate("MainWindow", "Print Report"))
        
        self.pushButton_16.setText(_translate("MainWindow", "Remark"))
        
        self.label_35.setText(_translate("MainWindow", ""))
        self.label_36.setText(_translate("MainWindow", "TENSILE - MATERIAL TESTING"))
        self.pushButton_17.setText(_translate("MainWindow", "RETURN"))
        self.pushButton_17.clicked.connect(MainWindow.close)
        
        self.pushButton_13.clicked.connect(self.open_pdf)
        self.pushButton_15.clicked.connect(self.print_file)
        self.pushButton_3.clicked.connect(self.open_email_report)
        self.pushButton_16.clicked.connect(self.open_comment_popup)
        self.pushButton_14.clicked.connect(self.validation)
        
        self.reset()
        self.load_data()
        if(self.label_31.text() == "(Rectangle)"):
                self.thickness_onChange()
                self.lineEdit.textChanged.connect(self.thickness_onChange)
                self.lineEdit_2.textChanged.connect(self.width_onChange)
                self.f_thickness_onChange()
                self.lineEdit_6.textChanged.connect(self.f_thickness_onChange)
                self.lineEdit_7.textChanged.connect(self.f_width_onChange)
        else:
                self.diameter_onChange()
                self.lineEdit.textChanged.connect(self.diameter_onChange)
                self.f_diameter_onChange()
                self.lineEdit_6.textChanged.connect(self.f_diameter_onChange)
                
        
        self.final_length_onChange()
        self.lineEdit_5.textChanged.connect(self.final_length_onChange)
        self.lineEdit_4.textChanged.connect(self.final_length_onChange)
        #self.pushButton_4.clicked.connect(self.start_test_tensile_8)
        
    def reset(self):        
        if(self.timer3.isActive()): 
           self.timer3.stop() 
        
        self.sc_blank =PlotCanvas(self) 
        self.gridLayout.addWidget(self.sc_blank, 1, 0, 1, 1)
        self.lcdNumber.setProperty("value", 0.0)
        self.lcdNumber.hide()
        self.lcdNumber_2.setProperty("value", 0.0)
        self.lcdNumber_2.hide()
    
    def load_data(self):
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT TEST_ID,INI_THICKNESS,INI_WIDTH,INI_AREA,GUAGE_LENGTH,FINAL_LENGTH,FINAL_THICKNESS,FINAL_WIDTH,round(FINAL_AREA,2),REDUCED_AREA_PRC,TENSILE_STRENGTH,YEILD_STRENGTH,SPECIMEN_NAME,SPEC_DTLS,CREATED_ON,SHAPE  FROM TEST_MST WHERE TEST_ID IN (SELECT TEST_ID FROM GLOBAL_VAR)") 
        for x in results:
            self.label_12.setText("("+str(x[0])+")")
            self.lineEdit.setText(str(x[1]))
            self.lineEdit.setReadOnly(True)
            self.lineEdit_2.setText(str(x[2]))
            self.lineEdit_2.setReadOnly(True)
            self.lineEdit_3.setText(str(x[3]))
            self.lineEdit_3.setReadOnly(True)
            self.lineEdit_4.setText(str(x[4]))
            self.lineEdit_5.setText(str(x[5]))
            self.lineEdit_6.setText(str(x[6]))
            self.lineEdit_7.setText(str(x[7]))
            self.label_30.setText(str(x[9]))
            self.label_32.setText(str(x[8]))
            self.label_15.setText(str(x[10]))
            self.label_17.setText(str(x[11]))
            self.label_27.setText(str(x[12]))
            self.label_34.setText(str(x[13]))
            self.label_20.setText(str(x[14]))
            self.label_31.setText("("+str(x[15])+")")
     
            
        connection.close()
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT TEST_ID FROM GLOBAL_VAR")       
        for x in results:           
                 self.label_12.setText(str(x[0]).zfill(3))
                 self.test_id=str(x[0])
        connection.close()
        
        
    def thickness_onChange(self):
        self.thickness=""
        self.width=""
        
        try:
            self.thickness=int(self.lineEdit.text())
        except ValueError as e:
            try:
                self.thickness=float(self.lineEdit.text())
            except ValueError as e:
                self.lineEdit_3.setText("0.00")    
                
        
        try:
            self.width=int(self.lineEdit_2.text())
        except ValueError as e:
            try:
                self.width=float(self.lineEdit_2.text())
            except ValueError as e:
                self.lineEdit_3.setText("0.00")  
        
        #print(" thickness :"+str(type(self.thickness))+" width:"+str(type(self.width)))
        #self.lineEdit_3.setText(str(float(float(int(self.thickness))*float(int(self.width)))))
        try:
            self.lineEdit_3.setText(str(float(self.thickness * self.width)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
        
        self.f_thickness_onChange()    
            
            
    def width_onChange(self):
        self.thickness=""
        self.width=""        
        try:
            self.thickness=int(self.lineEdit.text())
        except ValueError as e:
            try:
                self.thickness=float(self.lineEdit.text())
            except ValueError as e:
                self.lineEdit_3.setText("0.00") 
        try:
            self.width=int(self.lineEdit_2.text())
        except ValueError as e:
            try:
                self.width=float(self.lineEdit_2.text())
            except ValueError as e:
                self.lineEdit_3.setText("0.00")
        try:
            self.lineEdit_3.setText(str(float(self.thickness * self.width)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
        
        self.f_width_onChange()   
            
    def diameter_onChange(self):
        self.label_8.hide()
        self.label_28.hide()
        self.lineEdit_2.hide()
        self.lineEdit_7.hide()
        self.diameter="0.0"
        try:
            self.diameter=int(self.lineEdit.text())
        except ValueError as e:
            try:
                self.diameter=float(self.lineEdit.text())
            except ValueError as e:
                self.lineEdit_3.setText("0.00")
                
        try:
            self.lineEdit_3.setText(str(round(float((self.diameter * self.diameter * 3.14)/4),2)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
       
        self.f_diameter_onChange()
    
    def f_thickness_onChange(self):
        self.thickness=""
        self.width=""
        
        try:
            self.thickness=int(self.lineEdit_6.text())
        except ValueError as e:
            try:
                self.thickness=float(self.lineEdit_6.text())
            except ValueError as e:
                self.label_30.setText("0.00")    
                
        
        try:
            self.width=int(self.lineEdit_7.text())
        except ValueError as e:
            try:
                self.width=float(self.lineEdit_7.text())
            except ValueError as e:
                self.label_30.setText("0.00")  
        
        #print(" thickness :"+str(type(self.thickness))+" width:"+str(type(self.width)))
        #self.lineEdit_3.setText(str(float(float(int(self.thickness))*float(int(self.width)))))
        try:
            self.label_30.setText(str(float(self.thickness * self.width)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
        
        self.f_reduced_area_prc()
            
    def f_width_onChange(self):
        self.thickness=""
        self.width=""        
        try:
            self.thickness=int(self.lineEdit_6.text())
        except ValueError as e:
            try:
                self.thickness=float(self.lineEdit_6.text())
            except ValueError as e:
                self.label_30.setText("0.00") 
        try:
            self.width=int(self.lineEdit_7.text())
        except ValueError as e:
            try:
                self.width=float(self.lineEdit_7.text())
            except ValueError as e:
                self.label_30.setText("0.00")
        try:
            self.label_30.setText(str(float(self.thickness * self.width)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
        
        self.f_reduced_area_prc()
            
            
    def f_diameter_onChange(self):
        self.label_8.hide()
        self.lineEdit_2.hide()
        self.diameter="0.0"
        try:
            self.diameter=int(self.lineEdit_6.text())
        except ValueError as e:
            try:
                self.diameter=float(self.lineEdit_6.text())
            except ValueError as e:
                self.label_30.setText("0.00")
                
        try:
            self.label_30.setText(str(round(float((self.diameter * self.diameter * 3.14)/4),2)))
        except ValueError as e:
            #self.lineEdit_3.setText("0.00")
            print("Caluculation error");
        except TypeError as e:
            print("Caluculation error2");
        except:
            print("Caluculation error3");
        self.f_reduced_area_prc()
    
    def f_reduced_area_prc(self):
        self.initial_area=self.lineEdit_3.text()
        self.final_area=self.label_30.text()
        if (float(self.initial_area) > float(self.final_area)):
                self.reduced_area=float(self.initial_area)-float(self.final_area)
                self.reduced_area_prc=float(float(self.reduced_area)*100/float(self.initial_area))
                self.label_32.setText(str(round(self.reduced_area_prc,0)))
                print("intial area:"+str(self.initial_area)+" finala area :"+str(self.final_area))
        else:
                self.label_32.setText("0")
    
    def final_length_onChange(self):
        self.final_length=self.lineEdit_5.text()
        self.guage_length=self.lineEdit_4.text()
        self.prc_elongation=0        
        try:
            self.final_length=int(self.lineEdit_5.text())
        except ValueError as e:
            try:
                self.final_length=float(self.lineEdit_5.text())
            except ValueError as e:
                    #self.lineEdit_3.setText("0.00")
                    print("Caluculation error");
            except TypeError as e:
                    print("Caluculation error2");
            except:
                    print("Caluculation error3");
                
        
        try:
            self.guage_length=int(self.lineEdit_4.text())
        except ValueError as e:
            try:
                self.guage_length=float(self.lineEdit_4.text())
            except ValueError as e:                   
                    print("Caluculation error");
            except TypeError as e:
                    print("Caluculation error2");
            except:
                    print("Caluculation error3");
                
                
                
                
        try:        
            self.elongation=self.final_length-self.guage_length
        except ValueError as e:                   
                    print("Caluculation error");
        except TypeError as e:
                    print("Caluculation error2");
        except:
                    print("Caluculation error3");   
        
        try:
            self.prc_elongation=(self.elongation*100)/self.guage_length
            self.label_29.setText(str(round(self.prc_elongation,0))+" % ")
        
        except ValueError as e:                   
                    print("Caluculation error");
        except TypeError as e:
                    print("Caluculation error2");
        except:
                    print("Caluculation error3");   
        
        
            
    def print_file(self):        
        #os.system("gnome-open /home/pi/TYR_2.0_18.5/reports/Reportxxx.pdf")
        self.window = QtWidgets.QMainWindow()
        self.ui=P_POP_TEST_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()
    
    def open_email_report(self):
        #self.test_id=(self.tableWidget.item(row, 1).text() )
        self.test_id=self.label_12.text()
        print(" test_id :"+str(self.test_id))  
        connection = sqlite3.connect("tyr.db")        
        with connection:        
                        cursor = connection.cursor()                
                        cursor.execute("update global_var set EMAIL_TEST_ID='"+str(self.test_id)+"'")                 
        connection.commit()
        connection.close()
            
        self.window = QtWidgets.QMainWindow()
        self.ui=popup_email_test_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()
        
        
    def open_comment_popup(self):
        
        #print(" test_id :"+str(self.test_id))  
        connection = sqlite3.connect("tyr.db")        
        with connection:        
                    cursor = connection.cursor()                
                    cursor.execute("update global_var set EMAIL_TEST_ID='"+str(self.test_id)+"'")                 
        connection.commit()
        connection.close()
            
        self.window = QtWidgets.QMainWindow()
        self.ui=comment_Ui_MainWindow()
        self.ui.setupUi(self.window)           
        self.window.show()
        
   
                
   
    
    
    
  
                
                
                
        
        
        
    def validation(self):
        self.goAhead="No"
        if(str(self.lineEdit.text()) == ""):
               self.label_35.setText("Initail Size Parameters  1 should not be NULL.")
               self.label_35.show()
        elif(str(self.lineEdit_2.text()) == "" and self.label_31.text() == "(Rectangle)"):
               self.label_35.setText("Initail Size Parameters  2 should not be NULL.")
               self.label_35.show()
        elif(str(self.lineEdit_3.text()) == ""):
               self.label_35.setText("Inital Area should not be NULL.")
               self.label_35.show()
        elif(str(self.lineEdit_4.text()) == ""):
               self.label_35.setText("Guage Length Should not be NULL")
               self.label_35.show()
        elif(str(self.lineEdit_5.text()) == ""):
               self.label_35.setText("Final Lenght Should not be NULL")
               self.label_35.show()
        elif(str(self.lineEdit_6.text()) == ""  and self.label_31.text() == "(Rectangle)"):
               self.label_35.setText("Final Size Parameters  1 should not be NULL.")
               self.label_35.show()
        elif(str(self.lineEdit_7.text()) == ""):
               self.label_35.setText("Size Parameters  2 should not be NULL.")
               self.label_35.show()
        else:
               self.goAhead="Yes"
               
               connection = sqlite3.connect("tyr.db")
               results=connection.execute("select count(*) from TEST_MST WHERE TEST_ID = '"+str(self.label_12.text())+"'")       
               for x in results:           
                 if(int(x[0]) > 0):
                       self.test_id_exist="Yes"
                 else:
                       self.test_id_exist="No"                     
               connection.close() 
               
               if(self.test_id_exist=="Yes"):                   
                   connection = sqlite3.connect("tyr.db")
                   with connection:        
                       cursor = connection.cursor()
                       cursor.execute("UPDATE TEST_MST SET SPECIMEN_NAME='"+str(self.label_27.text())+"',SPEC_DTLS='"+str(self.label_34.text())+"',INI_THICKNESS='"+str(self.lineEdit.text())+"',INI_WIDTH='"+str(self.lineEdit_2.text())+"',INI_DIAMETER='"+str(self.lineEdit.text())+"',INI_AREA='"+str(self.lineEdit_3.text())+"',REDUCED_AREA_PRC='"+str(self.label_32.text())+
                        "',TENSILE_STRENGTH='"+str(self.label_15.text())+"',YEILD_STRENGTH='"+str(self.label_17.text())+"',FINAL_LENGTH='"+str(self.lineEdit_5.text())+"',ELONGATION_PERC='"+str(self.label_29.text())+"',FINAL_THICKNESS='"+str(self.lineEdit_6.text())+"',FINAL_WIDTH='"+str(self.lineEdit_7.text())+"',FINAL_DIAMETER='"+str(self.lineEdit.text())+"',FINAL_AREA='"+str(self.label_30.text())+"'      WHERE  TEST_ID = '"+str(self.label_12.text())+"'")
                       
                   connection.commit();
                   connection.close()
                   print("Record updated  in TEST_MST:")
                   self.label_35.setText("Test Data Saved Successfully")
                   self.pushButton_13.setEnabled(True)
                   self.pushButton_15.setEnabled(True)
                   self.pushButton_16.setEnabled(True)
                   self.pushButton_3.setEnabled(True)
                   
               else:
                   print("Record is not updated  in TEST_MST:")
                   self.label_35.setText("Test Data is not Saved Successfully")
                   
                   
    def open_pdf(self):
        self.sc_data =PlotCanvas(self,width=8, height=5,dpi=90) 
        self.create_pdf_tensile_8()
        os.system("xpdf ./reports/test_report.pdf")
        product_id=self.get_usb_storage_id()
        if(product_id != "ERROR"):
                os.system("sudo mount /dev/sda1 /media/usb -o uid=pi,gid=pi")
                os.system("cp ./reports/test_report.pdf /media/usb/Report_of_test_"+str(self.test_id)+".pdf")
                os.system("sudo umount /media/usb")
        else:
             print("Please connect usb storage device")
      
    def get_usb_storage_id(self):
        os.system("rm -rf lsusb_data.txt")  
        product_id = "ERROR"
        os.system("lsusb >> lsusb_data.txt")
        try:
           f = open('lsusb_data.txt','r')
           for line in f:
               cnt=0                
               cnt=int(line.find("SanDisk"))
               if cnt > 0 :                   
                   product_id = line[28:33]
                   product_id = "0x"+str(product_id)
           f.close()
        except:
           product_id = "ERROR"
        return product_id
    
    def create_pdf_tensile_8(self):
        
        self.remark="______________________________________________________________________________"
        y=300
        Elements=[]
        
        connection = sqlite3.connect("tyr.db")        
        results=connection.execute("SELECT A.CREATED_ON,A.TEST_ID,A.SPECIMEN_NAME,A.BATCH_ID,A.SPEC_DTLS,A.PARTY_NAME,A.COMMENTS  FROM TEST_MST A where A.TEST_ID IN (SELECT TEST_ID FROM GLOBAL_VAR)")
        for x in results:
            self.summary_data=[["Test No: ",str(x[1]),"Tested Date: ",str(x[0])],["Specimen ID : ",str(x[2]),"Batch ID: ",str(x[3])],["Specimen Details:  ",str(x[4]),"Party Name:",str(x[5])]]
            self.remark=str(x[6])
        connection.close()
        
        PAGE_HEIGHT=defaultPageSize[1]
        styles = getSampleStyleSheet()
        
        
        self.star=" * "
        if(self.label_31.text() == "(Rectangle)"):
                self.star=" * "
        else:
                self.star="  "
        
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT INI_THICKNESS,INI_WIDTH,INI_AREA,FINAL_THICKNESS,FINAL_WIDTH,FINAL_AREA,REDUCED_AREA_PRC,GUAGE_LENGTH,FINAL_LENGTH,ELONGATION_PERC,TENSILE_STRENGTH,YEILD_STRENGTH FROM TEST_MST  where TEST_ID IN (SELECT TEST_ID FROM GLOBAL_VAR) ") 
        for x in results:
            ptext2 = "<font name=Helvetica size=14> <b>Parameters : </b> </font>"            
            Title3 = Paragraph(str(ptext2), styles["Normal"])
            self.param_data=[["Initial Size (mm)  : ",str(x[0])+str(self.star)+str(x[1]),"Initial Area (mm2) : ",str(x[2])],["Final Size (mm)    :",str(x[3])+str(self.star)+str(x[4]),"Final Area (mm2) : ",str(x[5])]]
            
            
            self.param_data.append(["Reduced Area (%)   : ",str(x[6])," "," "])
            self.param_data.append(["Guage Length(mm)    : ",str(x[7]),"Final Length (mm)   :",str(x[8])])
            self.param_data.append(["Elongation (%)   : ",str(x[9])," "," "])
            self.param_data.append(["Tensile Strength (MPa)    : ",str(x[10]),"Yeild   Strength (MPa) :",str(x[11])])
            
            '''
            line0= Paragraph(" ----------------------------------------------------------------", styles["Normal"])
            line1 = Paragraph("              Initial Size (mm)  :     "+str(x[0])+str(self.star)+str(x[1]), styles["Normal"])
            line2 = Paragraph("              Initial Area (mm2) :  "+str(x[2]), styles["Normal"])
            line3= Paragraph(" ----------------------------------------------------------------", styles["Normal"])
            line4 = Paragraph("              Final Size (mm)    :  "+str(x[3])+str(self.star)+str(x[4]), styles["Normal"])
            line5 = Paragraph("              Final Area (mm2)   :  "+str(x[5]), styles["Normal"])
            line6= Paragraph(" --------------------------------------------------------------", styles["Normal"])
            line7 = Paragraph("              Reduced Area (%)   :  "+str(x[6]), styles["Normal"])
            
            line8 = Paragraph("              Guage Length(mm)    :  "+str(x[7]), styles["Normal"])
            line9 = Paragraph("              Final Length (mm)   :  "+str(x[8]), styles["Normal"])
            line10= Paragraph(" --------------------------------------------------------------", styles["Normal"])
            line11 = Paragraph("              Elongation (%)   :  "+str(x[9]), styles["Normal"])
            
            line12 = Paragraph("              Tensile Strength (MPa)    :  "+str(x[10]), styles["Normal"])
            line13 = Paragraph("              Yeild   Strength (MPa)    :  "+str(x[11]), styles["Normal"])
            '''
            
            
            
            
            
            
            
            
        connection.close()
        
        
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("select COMPANY_NAME,ADDRESS1 from SETTING_MST ") 
        for x in results:            
            Title = Paragraph(str(x[0]), styles["Title"])
            ptext = "<font name=Helvetica size=11>"+str(x[1])+" </font>"            
            Title2 = Paragraph(str(ptext), styles["Title"])
        connection.close()
        
        blank=Paragraph("                                                                                          ", styles["Normal"])
        comments = Paragraph("<font name=Helvetica size=14><b>  Remark : </b></font>"+str(self.remark), styles["Normal"])        
        
        footer_2= Paragraph("<font name=Helvetica size=14><b>   Authorised and Signed By : _________________ </b></font>",styles["Normal"])
        
        linea_firma = Line(2, 90, 670, 90)
        d = Drawing(50, 1)
        d.add(linea_firma)
        
        #f1=Table(data)
        #f1.setStyle(TableStyle([("BOX", (0, 0), (-1, -1), 0.50, colors.black),('INNERGRID', (0, 0), (-1, -1), 0.50, colors.black),('FONT', (0, 0), (-1, -1), "Helvetica", 9),('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold')]))       
        
        #TEST_DETAILS = Paragraph("----------------------------------------------------------------------------------------------------------------------------------------------------", styles["Normal"])
        #TS_STR = Paragraph("Tensile Strength and Modulus Details :", styles["Normal"])
        #f2=Table(data2)
        #f2.setStyle(TableStyle([("BOX", (0, 0), (-1, -1), 0.50, colors.black),('INNERGRID', (0, 0), (-1, -1), 0.50, colors.black),('FONT', (0, 0), (-1, -1), "Helvetica", 9),('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold')]))       
         
        f3=Table(self.summary_data)
        f3.setStyle(TableStyle([("BOX", (0, 0), (-1, -1), 0.50, colors.black),('INNERGRID', (0, 0), (-1, -1), 0.50, colors.black),('FONT', (0, 0), (-1, -1), "Helvetica", 11),('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),('FONTNAME', (2, 0), (2, -1), 'Helvetica-Bold')]))       
        
        f4=Table(self.param_data)
        f4.setStyle(TableStyle([("BOX", (0, 0), (-1, -1), 0.50, colors.black),('INNERGRID', (0, 0), (-1, -1), 0.50, colors.black),('FONT', (0, 0), (-1, -1), "Helvetica", 11),('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),('FONTNAME', (2, 0), (2, -1), 'Helvetica-Bold')]))       
        
        report_gr_img="last_graph.png"        
        pdf_img= Image(report_gr_img, 6 * inch, 4 * inch)
        
        
        Elements=[Title,Title2,Spacer(1,12),Spacer(1,12),f3,Spacer(1,12),pdf_img,Spacer(1,12),Title3,Spacer(1,12),Spacer(1,12),f4,Spacer(1,12),Spacer(1,12),Spacer(1,12),comments,Spacer(1,12),Spacer(1,12),Spacer(1,12),Spacer(1,12),blank,blank,blank,Spacer(1,12),Spacer(1,12),footer_2,Spacer(1,12)]
        
        #Elements.append(f1,Spacer(1,12))        
        #Elements.append(f2,Spacer(1,12))
        
        doc = SimpleDocTemplate('./reports/test_report.pdf', rightMargin=10,
                                leftMargin=20,
                                topMargin=10,
                                bottomMargin=30,)
        doc.build(Elements)
       
    
   
  
class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=8, height=5, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        #fig.savefig('ssdsd.png')
        self.axes = fig.add_subplot(111)        
        FigureCanvas.__init__(self, fig)
        #FigureCanvas.setStyleSheet("background-color:red;")
        FigureCanvas.setSizePolicy(self,
                QSizePolicy.Expanding,
                QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)       
        
        self.plot()        
        
        
    def plot(self):
        ax = self.figure.add_subplot(111)
       
        ax.set_facecolor('#CCFFFF')   
        ax.minorticks_on()
        
        ax.grid(which='major', linestyle='-', linewidth='0.5', color='black')
        ax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
        
        self.s=[]
        self.t=[]
        self.graph_ids=[]    
        self.x_num=[0.0]
        self.y_num=[0.0]
        self.test_type="Tensile"
        self.color=['b','r','g','y','k','c','m','b']
        #ax.set_title('Test Id=32         Samples=3       BreakLoad(Kg)=110        Length(mm)=3')         
        
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT GRAPH_ID FROM TEST_MST WHERE TEST_ID IN (SELECT TEST_ID FROM GLOBAL_VAR) order by GRAPH_ID") 
        for x in results:
             self.graph_ids.append(x[0])             
        connection.close()
        
        ### Univarsal change for  Graphs #####################
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT GRAPH_SCAL_X_LENGTH,GRAPH_SCAL_Y_LOAD  FROM TEST_MST WHERE TEST_ID IN (SELECT TEST_ID FROM GLOBAL_VAR)") 
        for x in results:
             ax.set_xlim(0,int(x[0]))
             ax.set_ylim(0,int(x[1]))          
        connection.close()
        
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT NEW_TEST_NAME FROM GLOBAL_VAR") 
        for x in results:
             self.test_type=str(x[0])            
        connection.close()
        
        
        for g in range(len(self.graph_ids)):
            self.x_num=[0.0]
            self.y_num=[0.0]
        
            connection = sqlite3.connect("tyr.db")
            if(self.test_type=="Compress" or self.test_type=="Flexural"):
                results=connection.execute("SELECT X_NUM,Y_NUM FROM GRAPH_MST WHERE GRAPH_ID='"+str(self.graph_ids[g])+"'")
            else:   
                results=connection.execute("SELECT X_NUM,Y_NUM FROM GRAPH_MST WHERE X_NUM > 0 AND  GRAPH_ID='"+str(self.graph_ids[g])+"'")
            for k in results:        
                self.x_num.append(k[0])
                self.y_num.append(k[1])
            connection.close() 
        
            if(g < 8 ):
                ax.plot(self.x_num,self.y_num, self.color[g],label="Specimen_"+str(g+1))
        
        print("self.test_type:"+str(self.test_type))
        if(str(self.test_type)=="Compress"):
            ax.set_xlabel('Compression (mm)')        
        else:
            ax.set_xlabel('Strain (%)')
        ax.set_ylabel('Stress (MPa)')
        #self.connect('motion_notify_event', mouse_move)
        ax.legend()        
        self.draw()
        self.figure.savefig('last_graph.png',dpi=100)
        
        #ax.connect('motion_notify_event', mouse_move)

  
    
     

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = TY_20_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
