# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TY_16_calbration_extentio_mtr.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
import sqlite3
import serial
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator


class TY_17_Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1102, 648)
        MainWindow.setBaseSize(QtCore.QSize(0, 0))
        MainWindow.setStyleSheet("background-color: rgb(0, 170, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 10, 1061, 611))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(0, 170, 255);\n"
"color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setLineWidth(3)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(750, 20, 241, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(20, 10, 521, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.groupBox_6 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_6.setGeometry(QtCore.QRect(30, 80, 421, 411))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_6.setObjectName("groupBox_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber.setGeometry(QtCore.QRect(20, 60, 291, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 255, 255);")
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_4 = QtWidgets.QLabel(self.groupBox_6)
        self.label_4.setGeometry(QtCore.QRect(340, 300, 47, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.groupBox_6)
        self.label_6.setGeometry(QtCore.QRect(330, 100, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.groupBox_6)
        self.lcdNumber_2.setGeometry(QtCore.QRect(20, 250, 291, 101))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber_2.setFont(font)
        self.lcdNumber_2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"\n"
"font: 10pt \"MS Sans Serif\";\n"
"color: rgb(255, 0, 0);\n"
"border-color: rgb(255, 0, 0);")
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.groupBox_4 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_4.setGeometry(QtCore.QRect(510, 80, 511, 411))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setStyleSheet("color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.groupBox_4.setObjectName("groupBox_4")
        self.pushButton_14 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_14.setGeometry(QtCore.QRect(120, 50, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_16 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_16.setGeometry(QtCore.QRect(290, 230, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_16.setObjectName("pushButton_16")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit.setGeometry(QtCore.QRect(280, 130, 191, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(239, 255, 241);")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_17 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_17.setGeometry(QtCore.QRect(60, 230, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_17.setObjectName("pushButton_17")
        self.frame_2 = QtWidgets.QFrame(self.groupBox_4)
        self.frame_2.setGeometry(QtCore.QRect(60, 320, 401, 71))
        self.frame_2.setStyleSheet("color: rgb(255, 255, 0);\n"
"background-color: rgb(0, 85, 0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setLineWidth(3)
        self.frame_2.setObjectName("frame_2")
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(30, 10, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(190, 10, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("")
        self.label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.frame_3 = QtWidgets.QFrame(self.groupBox_4)
        self.frame_3.setGeometry(QtCore.QRect(60, 130, 171, 61))
        self.frame_3.setStyleSheet("color: rgb(255, 255, 0);\n"
"background-color: rgb(0, 85, 0);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setLineWidth(3)
        self.frame_3.setObjectName("frame_3")
        self.label_41 = QtWidgets.QLabel(self.frame_3)
        self.label_41.setGeometry(QtCore.QRect(20, 10, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("")
        self.label_41.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_41.setObjectName("label_41")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        self.pushButton_9.setGeometry(QtCore.QRect(900, 530, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("background-color: rgb(209, 8, 45);\n"
"color: rgb(255, 255, 0);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.groupBox_7 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_7.setGeometry(QtCore.QRect(20, 520, 711, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setStyleSheet("background-color: rgb(0, 85, 0);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_7.setObjectName("groupBox_7")
        self.label_44 = QtWidgets.QLabel(self.groupBox_7)
        self.label_44.setGeometry(QtCore.QRect(20, 20, 641, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_44.setFont(font)
        self.label_44.setStyleSheet("color: rgb(255, 255, 0);")
        self.label_44.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1102, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.IO_error_flg=0
        self.capacity_flag="No"
        self.off_position_flag="No"
        self.flag="No"
        self.ser =""
        self.line =""                   
       
        self.xstr0=""
        self.xstr1=""
        self.xstr2=""
        self.buff=[]
        
        self.IO_error_flg=0
        self.xstr3=""
        self.xstr2=""
        self.xstr4=""
        self.current_value=0
        
        self.line1 =""
        self.xstr10=""
        self.xstr11=""
        self.xstr12=""
        self.buff1=[]
        
        self.c_wt=0
        self.count_value=0
        self.count_before=0
        self.count_after=0
        self.k_factor=0
        
        self.green_counter=0
        
        self.last_value=0
        self.current_value=0
        self.enable_buttons_flag="No"
        self.enable_counter=0
        self.weighing_crosses_min_wt_lim="No"
        self.weighing_crosses_max_wt_lim="No"
        self.wt_min_limit=0
        self.wt_max_limit=0      
       
        
        self.last_display_val=""
        self.ld_set=0
        self.mod_val=0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_20.setText(_translate("MainWindow", "05 Aug 2020 12:45:00 "))
        self.label.setText(_translate("MainWindow", "EXTERNAL EXTENTIOMETER CALIBRATION"))
        self.groupBox_6.setTitle(_translate("MainWindow", " SIGNALS"))
        self.label_4.setText(_translate("MainWindow", ".MM"))
        self.label_6.setText(_translate("MainWindow", "Count"))
        self.groupBox_4.setTitle(_translate("MainWindow", " CALLIBRATION"))
        self.pushButton_14.setText(_translate("MainWindow", "START CALLIBRATION"))
        self.pushButton_16.setText(_translate("MainWindow", "ZERO"))
        self.pushButton_17.setText(_translate("MainWindow", "CALLIBRATE"))
        self.label_9.setText(_translate("MainWindow", "C- Date      :"))
        self.label_10.setText(_translate("MainWindow", ""))
        self.label_41.setText(_translate("MainWindow", "EXTEND (MM)"))
        self.pushButton_9.setText(_translate("MainWindow", "RETURN"))
        self.groupBox_7.setTitle(_translate("MainWindow", " MESSAGE"))
        self.label_44.setText(_translate("MainWindow", "Successfully set Capacity."))
        self.timer2=QtCore.QTimer()
        self.timer3=QtCore.QTimer()
        self.timer1=QtCore.QTimer()
        self.timer1.setInterval(1000)        
        self.timer1.timeout.connect(self.device_date)
        self.timer1.start(1)
        self.pushButton_9.clicked.connect(MainWindow.close)
        self.pushButton_17.clicked.connect(self.start_calibration)
        self.pushButton_14.clicked.connect(self.pre_calibration_steps)
        self.pushButton_16.clicked.connect(self.set_zero)
        self.label_44.hide()
        self.load_data()
        
    
    def device_date(self):     
        self.label_20.setText(datetime.datetime.now().strftime("%d %b %Y %H:%M"))
    
    def load_data(self):       
        connection = sqlite3.connect("tyr.db")
        results=connection.execute("SELECT LAST_CALIBRATION_DT FROM GLOBAL_VAR") 
        for x in results:                      
                      self.label_10.setText(str(x[0]))
        connection.close()
        self.start_wt()
        
    def pre_calibration_steps(self):        
        self.pushButton_17.show()
        self.lineEdit.show()
        self.frame_3.show()        
        try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                              )
                
                #=============
                self.command_str="T"
                print("Tare Command : "+str(self.command_str))
                b = bytes(self.command_str, 'utf-8')
                self.ser.write(b)
                #=============
                
                #self.label_44.setText("Tare Done. Please Callibrate now" )  
                #self.label_44.show()
        except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()   
    
    def start_calibration(self):
        if(self.lineEdit.text() != ""):
            try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                                )
                
                
                self.ser.flush()
              
                self.count_before=self.count_value
                self.c_wt=0
                if(str(self.lineEdit.text()) != ""):                    
                   self.c_wt=float(str(self.lineEdit.text()))
                   self.c_wt=int(self.c_wt)
                   print("self.c_wt : "+str(self.c_wt))
                else:
                   self.c_wt=0
                   print("inside else self.c_wt : "+str(self.c_wt))
                if(int(self.c_wt) > 0):
                    self.command_str=""
                    self.command_str=str(self.c_wt)+"\r\n"
                    print("Callibration Command1 : "+str(self.command_str))
                    b = bytes(self.command_str, 'utf-8')
                    self.ser.write(b)
                    time.sleep(0.5)
                    self.command_str="C"
                    print("Callibration Command2 : "+str(self.command_str))
                    b = bytes(self.command_str, 'utf-8')
                    self.ser.write(b)
                    time.sleep(0.5)
                    self.label_44.setText("Calibration is Done succefully." )  
                    self.label_44.show()                    
                    self.count_after=self.count_value
                    
                    connection = sqlite3.connect("tyr.db")
                    with connection:        
                            cursor = connection.cursor()
                            cursor.execute("UPDATE GLOBAL_VAR SET LAST_CALIBRATION_DT='"+str(self.label_20.text())+"'")                    
                           
                    connection.commit();                    
                    connection.close()
                    
                    connection = sqlite3.connect("tyr.db")
                    results=connection.execute("SELECT LAST_CALIBRATION_DT FROM GLOBAL_VAR ") 
                    for x in results:
                            #self.label_8.setText(str(x[0]))
                            self.label_10.setText(str(x[0]))
                    connection.close()                    
                else:
                    self.label_44.setText("Calibration Error." )  
                    self.label_44.show()
                time.sleep(1)                
                
            except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()
        else:
            self.label_44.setText("Please Enter the Load used." )  
            self.label_44.show()
    
    def stop_timer3(self):
       if(self.timer3.isActive()):
           self.timer3.stop(1)           
           
            
            
    def start_wt(self):
        #print("Weight Started ....")
        try:
            self.ser = serial.Serial(
                                port='/dev/ttyAMA0',
                                baudrate=115200,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                xonxoff=False,
                                timeout = 0.05
                            )
        
            self.ser.flush()       
                     
            
            
            self.line = self.ser.readline(15)
            print("o/p:"+str(self.line))
             
            self.timer2.setInterval(5000)        
            self.timer2.timeout.connect(self.display_lcd_val)
            self.timer2.start(1)
            
            
        except IOError:
            print("IO Errors-load cell connections error")
            self.IO_error_flg=1
            self.label_44.setText("LOAD CELL CONNECTION ERROR")  
            self.label_44.show()
            self.stop_timer()
            
            
    def display_lcd_val(self):               
        #print(" inside display_lcd_val:"+str(self.IO_error_flg))
        if(self.IO_error_flg==0):
            try:
                self.line = self.ser.readline()
                #print(" raw o/p:"+str(self.line))
                #print("self.line:"+str(self.line,'utf-8'))
                self.xstr0=str(self.line,'utf-8')
                self.xstr1=self.xstr0.replace("\r","")
                self.xstr2=self.xstr1.replace("\n","")
                self.buff=self.xstr2.split("_")
                self.last_value=self.current_value 
                if(len(self.buff)> 1):
                        #if(str(self.buff[3]) == 'R'): 
                                self.xstr2=str(self.buff[0])
                                try:
                                     self.xstr4=float(self.xstr2)
                                except ValueError:                        
                                    print("Value Error"+str(self.xstr2))
                                    self.xstr4=0                    
                                try:
                                    #self.current_value=float(int(self.xstr4)/1000)
                                    self.count_value=float(int(self.buff[1]))                                    
                                    self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                   
                                except ValueError:
                                    print("Value Error :"+str(self.xstr4))
                                    self.xstr4=0
                                    self.current_value=0                    
                                #self.lcdNumber_2.setProperty("value", str(self.xstr4))
                                self.lcdNumber.setProperty("value", str(self.count_value))
                                
                                #print("enable_buttons_flag :"+str(self.enable_buttons_flag)+" self.last_value :"+str(self.last_value)+" self.current_value :"+str(self.current_value))
                            
            except IOError:
                print("IO Errors : Data Read Error") 
                self.IO_error_flg=1
                self.label_44.setText("DATA READ ERROR")  
                self.label_44.show()
    
    def stop_timer(self):
       if(self.timer2.isActive()):
           self.timer2.stop(1)           
           self.command_str="T"
           print("Stop Command : "+str(self.command_str))
           b = bytes(self.command_str, 'utf-8')
           self.ser.write(b)
    
    def set_zero(self):
        self.green_counter=15
        try:
                self.ser = serial.Serial(
                                    port='/dev/ttyAMA0',
                                    baudrate=115200,
                                    bytesize=serial.EIGHTBITS,
                                    parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE,
                                    xonxoff=False,
                                    timeout = 0.05
                                )
                #=============
                self.command_str="Z"
                print("Tare Command : "+str(self.command_str))
                b = bytes(self.command_str, 'utf-8')
                self.ser.write(b)
                #=============
                self.groupBox_7.show()
                self.label_44.setText("Set Zero Done." )  
                self.label_44.show()
                
                
                #self.log_audit("Maintaince"," Set Zero Done By Service Engineer.")
                
        except IOError:
                print("IO Errors")
                self.label_44.setText("IO Errors" )  
                self.label_44.show()
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = TY_17_Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
